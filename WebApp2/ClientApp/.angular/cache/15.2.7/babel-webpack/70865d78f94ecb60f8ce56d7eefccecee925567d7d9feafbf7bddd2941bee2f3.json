{"ast":null,"code":"import { Validators } from \"@angular/forms\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./collections.service\";\nimport * as i2 from \"../Flashcards/flashcards.service\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"@angular/common\";\nfunction CollectionformComponent_option_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const flashcard_r1 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate3(\"\", flashcard_r1.flashcardId, \". Term: \", flashcard_r1.name, \", Definition: \", flashcard_r1.description, \"\");\n  }\n}\nexport class CollectionformComponent {\n  constructor(_collectionService, _flashcardService, _formbuilder, _router, _route) {\n    this._collectionService = _collectionService;\n    this._flashcardService = _flashcardService;\n    this._formbuilder = _formbuilder;\n    this._router = _router;\n    this._route = _route;\n    this.isEditMode = false;\n    this.collectionId = -1;\n    this.flashcards = [];\n    this.selected = [];\n    this.collectionForm = _formbuilder.group({\n      collectionName: ['', Validators.required],\n      collectionDate: [''],\n      totalFlashcards: ['']\n      //collectionFlashcard: [''],\n      //contributerId: [''],\n      //contributers: [''],\n    });\n    // Automatic data insertion\n    this.collectionForm.patchValue({\n      collectionDate: new Date().getDate() + \".\" + (new Date().getMonth() + 1) + \".\" + new Date().getFullYear(),\n      totalFlashcards: this.selected.length,\n      flashcards: this._flashcardService.getFlashcards().subscribe(data => {\n        console.log('All', data);\n        this.flashcards = data;\n        console.log(\"selected flashcards:\", this.selected);\n      })\n    });\n  }\n  onChange(value) {\n    console.log(\"OnChange value: \", value);\n  }\n  onSubmit() {\n    console.log(\"CollectionCreate form submitted:\");\n    console.log(this.collectionForm);\n    console.log(\"The collection \" + this.collectionForm.value.collectionName + \" is created.\");\n    console.log(this.collectionForm.touched);\n    const newCollection = this.collectionForm.value;\n    if (this.isEditMode) {\n      this._collectionService.updateCollection(this.collectionId, newCollection).subscribe(response => {\n        if (response.success) {\n          console.log(response.message);\n          this._router.navigate(['/collections']);\n        } else {\n          console.log('Collection update failed');\n        }\n      });\n    } else {\n      this._collectionService.createCollection(newCollection).subscribe(response => {\n        if (response.success) {\n          console.log(response.message);\n          this._router.navigate(['/collections']);\n        } else {\n          console.log('Collections creation failed');\n        }\n      });\n    }\n  }\n  backToCollections() {\n    this._router.navigate(['/collections']);\n  }\n  ngOnInit() {\n    this._route.params.subscribe(params => {\n      if (params['mode'] === 'create') {\n        this.isEditMode = false; // Create mode\n      } else if (params['mode'] === 'edit') {\n        this.isEditMode = true; // Edit mode\n        this.collectionId = +params['id']; // Convert to number\n        this.loadCollectionForEdit(this.collectionId);\n      }\n    });\n  }\n  loadCollectionForEdit(collectionId) {\n    this._collectionService.getCollectionById(this.collectionId).subscribe(collection => {\n      console.log('retrived collection: ', collection);\n      this.collectionForm.patchValue({\n        collectionName: collection.collectionName,\n        collectionDate: collection.collectionDate,\n        contributer: collection.contributer,\n        totalFlashcards: collection.totalFlashcards\n      });\n    }, error => {\n      console.error('Error loading collection for edit:', error);\n    });\n  }\n}\nCollectionformComponent.ɵfac = function CollectionformComponent_Factory(t) {\n  return new (t || CollectionformComponent)(i0.ɵɵdirectiveInject(i1.CollectionService), i0.ɵɵdirectiveInject(i2.FlashcardService), i0.ɵɵdirectiveInject(i3.FormBuilder), i0.ɵɵdirectiveInject(i4.Router), i0.ɵɵdirectiveInject(i4.ActivatedRoute));\n};\nCollectionformComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: CollectionformComponent,\n  selectors: [[\"app-collections-collectionform\"]],\n  decls: 17,\n  vars: 5,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"collectionName\"], [\"type\", \"text\", \"id\", \"collectionName\", \"formControlName\", \"collectionName\", 1, \"form-control\"], [\"for\", \"collectionFlashcard\"], [\"multiple\", \"\", 2, \"width\", \"300px\", 3, \"change\"], [4, \"ngFor\", \"ngForOf\"], [\"type\", \"submit\", 1, \"btn-primary\", \"btn\", 3, \"disabled\"], [1, \"btn\", \"btn-secondary\", 3, \"click\"]],\n  template: function CollectionformComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h2\");\n      i0.ɵɵtext(1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function CollectionformComponent_Template_form_ngSubmit_2_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(3, \"div\", 1)(4, \"label\", 2);\n      i0.ɵɵtext(5, \"Name:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(6, \"input\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"div\", 1)(8, \"label\", 4);\n      i0.ɵɵtext(9, \"Add flashcards:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(10, \"br\");\n      i0.ɵɵelementStart(11, \"select\", 5);\n      i0.ɵɵlistener(\"change\", function CollectionformComponent_Template_select_change_11_listener() {\n        return ctx.onChange(ctx.flashcards[0].flashcardId);\n      });\n      i0.ɵɵtemplate(12, CollectionformComponent_option_12_Template, 2, 3, \"option\", 6);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(13, \"button\", 7);\n      i0.ɵɵtext(14);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"button\", 8);\n      i0.ɵɵlistener(\"click\", function CollectionformComponent_Template_button_click_15_listener() {\n        return ctx.backToCollections();\n      });\n      i0.ɵɵtext(16, \"Cancel\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate1(\"\", ctx.isEditMode ? \"Update\" : \"Create\", \" Collection\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formGroup\", ctx.collectionForm);\n      i0.ɵɵadvance(10);\n      i0.ɵɵproperty(\"ngForOf\", ctx.flashcards);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"disabled\", ctx.collectionForm.invalid);\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate1(\"\", ctx.isEditMode ? \"Update\" : \"Create\", \" Collection\");\n    }\n  },\n  dependencies: [i5.NgForOf, i3.ɵNgNoValidate, i3.NgSelectOption, i3.ɵNgSelectMultipleOption, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"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","names":["Validators","i0","CollectionformComponent","constructor","_collectionService","_flashcardService","_formbuilder","_router","_route","collectionForm","group","collectionName","required","collectionDate","totalFlashcards","patchValue","Date","getDate","getMonth","getFullYear","selected","length","flashcards","getFlashcards","subscribe","data","console","log","onChange","value","onSubmit","touched","newCollection","isEditMode","updateCollection","collectionId","response","success","message","navigate","createCollection","backToCollections","ngOnInit","params","loadCollectionForEdit","getCollectionById","collection","contributer","error","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\fmnil\\source\\repos\\WebApp2\\WebApp2\\ClientApp\\src\\app\\Collections\\collectionform.component.ts","C:\\Users\\fmnil\\source\\repos\\WebApp2\\WebApp2\\ClientApp\\src\\app\\Collections\\collectionform.component.html"],"sourcesContent":["import { Component } from \"@angular/core\";\r\nimport { FormGroup, FormControl, Validators, FormBuilder, ReactiveFormsModule } from \"@angular/forms\";\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { CollectionService } from './collections.service';\r\nimport { IFlashcard } from '../Flashcards/flashcard';\r\nimport { FlashcardService } from '../Flashcards/flashcards.service';\r\n\r\n@Component({\r\n  selector: \"app-collections-collectionform\",\r\n  templateUrl: \"./collectionform.component.html\"\r\n})\r\n\r\nexport class CollectionformComponent {\r\n  collectionForm: FormGroup;\r\n  isEditMode: boolean = false;\r\n  collectionId: number = -1;\r\n  flashcards: IFlashcard[] = [];\r\n  selected: IFlashcard[] = [];\r\n  selectedValue: any;\r\n\r\n\r\n  constructor(private _collectionService: CollectionService, private _flashcardService: FlashcardService, private _formbuilder: FormBuilder, private _router: Router, private _route: ActivatedRoute) {\r\n    this.collectionForm = _formbuilder.group({\r\n      collectionName: ['', Validators.required],\r\n      collectionDate: [''],\r\n      totalFlashcards: [''],\r\n      //collectionFlashcard: [''],\r\n      //contributerId: [''],\r\n      //contributers: [''],\r\n    });\r\n\r\n    // Automatic data insertion\r\n    this.collectionForm.patchValue({\r\n      collectionDate: new Date().getDate() + \".\" + (new Date().getMonth() + 1) + \".\" + new Date().getFullYear(),\r\n      totalFlashcards: this.selected.length,\r\n      flashcards: this._flashcardService.getFlashcards().subscribe(data => {\r\n        console.log('All', data);\r\n        this.flashcards = data;\r\n        console.log(\"selected flashcards:\", this.selected);\r\n      }),\r\n\r\n    })\r\n  }\r\n\r\n  onChange(value: any): void {\r\n    console.log(\"OnChange value: \", value);\r\n  }\r\n\r\n  onSubmit() {\r\n    console.log(\"CollectionCreate form submitted:\");\r\n    console.log(this.collectionForm);\r\n    console.log(\"The collection \" + this.collectionForm.value.collectionName + \" is created.\");\r\n    console.log(this.collectionForm.touched);\r\n    const newCollection = this.collectionForm.value;\r\n\r\n\r\n\r\n    if (this.isEditMode) {\r\n      this._collectionService.updateCollection(this.collectionId, newCollection)\r\n        .subscribe(response => {\r\n          if (response.success) {\r\n            console.log(response.message);\r\n            this._router.navigate(['/collections']);\r\n          }\r\n          else {\r\n            console.log('Collection update failed');\r\n          }\r\n        });\r\n    }\r\n    else {\r\n      this._collectionService.createCollection(newCollection)\r\n        .subscribe(response => {\r\n          if (response.success) {\r\n            console.log(response.message);\r\n            this._router.navigate(['/collections']);\r\n          }\r\n          else {\r\n            console.log('Collections creation failed');\r\n          }\r\n        });\r\n    }\r\n  }\r\n\r\n  backToCollections() {\r\n    this._router.navigate(['/collections']);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this._route.params.subscribe(params => {\r\n      if (params['mode'] === 'create') {\r\n        this.isEditMode = false; // Create mode\r\n      } else if (params['mode'] === 'edit') {\r\n        this.isEditMode = true; // Edit mode\r\n        this.collectionId = +params['id']; // Convert to number\r\n        this.loadCollectionForEdit(this.collectionId);\r\n      }\r\n    });\r\n  }\r\n\r\n  loadCollectionForEdit(collectionId: number) {\r\n    this._collectionService.getCollectionById(this.collectionId)\r\n      .subscribe(\r\n        (collection: any) => {\r\n          console.log('retrived collection: ', collection);\r\n          this.collectionForm.patchValue({\r\n            collectionName: collection.collectionName,\r\n            collectionDate: collection.collectionDate,\r\n            contributer: collection.contributer,\r\n            totalFlashcards: collection.totalFlashcards\r\n          });\r\n        },\r\n        (error: any) => {\r\n          console.error('Error loading collection for edit:', error);\r\n        }\r\n      );\r\n  }\r\n}\r\n","<h2>{{isEditMode ? 'Update' : 'Create'}} Collection</h2>\r\n\r\n<form [formGroup]=\"collectionForm\" (ngSubmit)=\"onSubmit()\">\r\n  <div class=\"form-group\">\r\n    <label for=\"collectionName\">Name:</label>\r\n    <input type=\"text\" id=\"collectionName\" formControlName=\"collectionName\" class=\"form-control\" />\r\n  </div>\r\n  <div class=\"form-group\">\r\n    <label for=\"collectionFlashcard\">Add flashcards:</label>\r\n    <br />\r\n    <select multiple (change)=\"onChange(flashcards[0].flashcardId)\" style=\"width: 300px;\" >\r\n      <option *ngFor=\"let flashcard of flashcards\">{{flashcard.flashcardId}}. Term: {{flashcard.name}}, Definition: {{flashcard.description}}</option>\r\n    </select>\r\n  </div>\r\n\r\n  <button class=\"btn-primary btn\" type=\"submit\" [disabled]=\"collectionForm.invalid\">{{isEditMode ? 'Update' : 'Create'}} Collection</button>\r\n  <button class=\"btn btn-secondary\" (click)=\"backToCollections()\">Cancel</button>\r\n</form>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}