{"ast":null,"code":"import { forkJoin } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../Flashcards/flashcards.service\";\nimport * as i2 from \"./collectionFlashcards.service\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"@angular/common\";\nfunction CollectionFlashcardForm_option_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 9);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const flashcard_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngValue\", flashcard_r1);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate3(\"\", flashcard_r1.flashcardId, \". Term: \", flashcard_r1.name, \", Definition: \", flashcard_r1.description, \"\");\n  }\n}\n;\nexport class CollectionFlashcardForm {\n  constructor(_flashcardService, _collectionFlashcardService, _formbuilder, _router, _route) {\n    this._flashcardService = _flashcardService;\n    this._collectionFlashcardService = _collectionFlashcardService;\n    this._formbuilder = _formbuilder;\n    this._router = _router;\n    this._route = _route;\n    this.flashcards = [];\n    this.collectionId = 0;\n    this.collectionFlashcardForm = _formbuilder.group({\n      flashcardId: [''],\n      collectionId: ['']\n    });\n    // Automatic data insertion\n    forkJoin([this._flashcardService.getFlashcards()]).subscribe(([flashcards]) => {\n      this.flashcards = flashcards;\n      console.log(\"Retrieved flashcards: \", flashcards);\n      this.collectionFlashcardForm.patchValue({\n        flashcards: []\n      });\n    }, error => {\n      console.error('Error fetching data:', error);\n    });\n  }\n  onSubmit() {\n    console.log(\"Selected Flashcard: \", this.collectionFlashcardForm.value);\n    const newCollectionFlashcards = [];\n    for (let selectedFlashcard of this.collectionFlashcardForm.value.selectedFlashcards) {\n      const collectionFlashcard = {\n        flashcardId: selectedFlashcard.flashcardId,\n        collectionId: this.collectionId\n      };\n      newCollectionFlashcards.push(collectionFlashcard);\n      console.log(\"Created collectionFlashcard Real \", collectionFlashcard);\n    }\n    this._collectionFlashcardService.addCollectionFlashcard(newCollectionFlashcards);\n    //this._collectionFlashcardService.getCollectionFlashcard().subscribe(\n    //  (collectionFlashcards) => {\n    //    this.collectionFlashcard = collectionFlashcards;\n    //    console.log(\"Retrieved collectionFlashcards after update: \", this.collectionFlashcard);\n    //  }\n    /*    );*/\n    //console.log(\"Selected Flashcard: \", this.collectionForm.value.selectedFlashcards)\n    //for (let i of this.collectionForm.value.selectedFlashcards) {\n    //  const collectionFlashcard: ICollectionFlashcard = { flashcardId: i.flashcardId, collectionId: this.collectionId }\n    //  this.collectionFlashcardForm.patchValue({\n    //    flashcardId: collectionFlashcard.flashcardId,\n    //    collectionId: this.collectionId,\n    //  })\n    //  this._collectionFlashcardService.addCollectionFlashcard(this.collectionFlashcardForm);\n    //  console.log(\"Created collectionFlashcard Real \", collectionFlashcard)\n    //}\n    //this._collectionFlashcardService.getCollectionFlashcard().subscribe(\n    //  (collectionFlashcard) => {\n    //    this.collectionFlashcard = collectionFlashcard;\n    //    console.log(\"Retrieved collectionFlashcards after update: \", this.collectionFlashcard)\n    //  }\n    //)\n    //const newCollection = this.collectionForm.value;\n    //console.log(\"newCollection: \", newCollection)\n    //if (this.isEditMode) {\n    //  console.log(\"sending collection: \", newCollection)\n    //  this._collectionService.updateCollection(this.collectionId, newCollection)\n    //    .subscribe(response => this.handleResponse(response));\n    //} else {\n    //  this._collectionService.createCollection(newCollection)\n    //    .subscribe(response => this.handleResponse(response));\n    //}\n  }\n\n  handleResponse(response) {\n    if (response.success) {\n      console.log(response.message);\n      this._router.navigate(['/collections']);\n    } else {\n      console.log('Collection operation failed');\n    }\n  }\n  backToCollectionsFlashcard() {\n    this._router.navigate(['/collectionsFlashcard']);\n  }\n  ngOnInit() {\n    this._route.params.subscribe(params => {\n      this.collectionId = +params['id']; // Convert to number\n      this.loadCollectionFlashcardsByCollectionId(this.collectionId);\n    });\n  }\n  loadCollectionFlashcardsByCollectionId(collectionId) {\n    this._collectionFlashcardService.getCollectionFlashcardByCollectionId(collectionId).subscribe(collectionFlashcard => {\n      console.log('retrieved collectionFlashcard: ', collectionFlashcard);\n      this.collectionFlashcardForm.patchValue({\n        flashcardId: collectionFlashcard.flashcardId,\n        collectionId: collectionFlashcard.collectionId\n      });\n    }, error => {\n      console.error('Error loading collection for edit:', error);\n    });\n  }\n}\nCollectionFlashcardForm.ɵfac = function CollectionFlashcardForm_Factory(t) {\n  return new (t || CollectionFlashcardForm)(i0.ɵɵdirectiveInject(i1.FlashcardService), i0.ɵɵdirectiveInject(i2.CollectionFlashcardService), i0.ɵɵdirectiveInject(i3.FormBuilder), i0.ɵɵdirectiveInject(i4.Router), i0.ɵɵdirectiveInject(i4.ActivatedRoute));\n};\nCollectionFlashcardForm.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: CollectionFlashcardForm,\n  selectors: [[\"collectionFlashcardform\"]],\n  decls: 17,\n  vars: 5,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"collectionName\"], [\"type\", \"text\", \"id\", \"collectionName\", \"formControlName\", \"collectionName\", 1, \"form-control\"], [\"for\", \"collectionFlashcard\"], [\"multiple\", \"\", \"formControlName\", \"selectedFlashcards\", 2, \"width\", \"300px\"], [3, \"ngValue\", 4, \"ngFor\", \"ngForOf\"], [\"type\", \"submit\", 1, \"btn-primary\", \"btn\", 3, \"disabled\"], [1, \"btn\", \"btn-secondary\", 3, \"click\"], [3, \"ngValue\"]],\n  template: function CollectionFlashcardForm_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h2\");\n      i0.ɵɵtext(1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function CollectionFlashcardForm_Template_form_ngSubmit_2_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(3, \"div\", 1)(4, \"label\", 2);\n      i0.ɵɵtext(5, \"Name:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(6, \"input\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"div\", 1)(8, \"label\", 4);\n      i0.ɵɵtext(9, \"Add flashcards:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(10, \"br\");\n      i0.ɵɵelementStart(11, \"select\", 5);\n      i0.ɵɵtemplate(12, CollectionFlashcardForm_option_12_Template, 2, 4, \"option\", 6);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(13, \"button\", 7);\n      i0.ɵɵtext(14);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"button\", 8);\n      i0.ɵɵlistener(\"click\", function CollectionFlashcardForm_Template_button_click_15_listener() {\n        return ctx.backToCollections();\n      });\n      i0.ɵɵtext(16, \"Cancel\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate1(\"\", ctx.isEditMode ? \"Update\" : \"Create\", \" Collection\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formGroup\", ctx.collectionForm);\n      i0.ɵɵadvance(10);\n      i0.ɵɵproperty(\"ngForOf\", ctx.flashcards);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"disabled\", ctx.collectionForm.invalid);\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate1(\"\", ctx.isEditMode ? \"Update\" : \"Create\", \" Collection\");\n    }\n  },\n  dependencies: [i5.NgForOf, i3.ɵNgNoValidate, i3.NgSelectOption, i3.ɵNgSelectMultipleOption, i3.DefaultValueAccessor, i3.SelectMultipleControlValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"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","names":["forkJoin","i0","CollectionFlashcardForm","constructor","_flashcardService","_collectionFlashcardService","_formbuilder","_router","_route","collectionFlashcardForm","group","flashcardId","collectionId","getFlashcards","subscribe","flashcards","console","log","patchValue","error","onSubmit","value","newCollectionFlashcards","selectedFlashcard","selectedFlashcards","collectionFlashcard","push","addCollectionFlashcard","handleResponse","response","success","message","navigate","backToCollectionsFlashcard","ngOnInit","params","loadCollectionFlashcardsByCollectionId","getCollectionFlashcardByCollectionId","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\William\\Source\\Repos\\WebApp2\\WebApp2\\ClientApp\\src\\app\\CollectionFlashcard\\collectionFlashcardform.component.ts","C:\\Users\\William\\Source\\Repos\\WebApp2\\WebApp2\\ClientApp\\src\\app\\CollectionFlashcard\\collectionFlashcardform.component.html"],"sourcesContent":["import { Component, OnInit } from \"@angular/core\";\r\nimport { FormGroup, FormBuilder, Validators } from \"@angular/forms\";\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { IFlashcard } from '../Flashcards/flashcard';;\r\nimport { ICollection } from '../Collections/collection';\r\nimport { ICollectionFlashcard } from './collectionFlashcard';\r\nimport { CollectionFlashcardService } from './collectionFlashcards.service';\r\nimport { FlashcardService } from '../Flashcards/flashcards.service';\r\nimport { forkJoin } from 'rxjs';\r\n\r\n@Component({\r\n  selector: \"collectionFlashcardform\",\r\n  templateUrl: \"./collectionFlashcardform.component.html\"\r\n})\r\n\r\nexport class CollectionFlashcardForm implements OnInit{\r\n  collectionFlashcardForm: FormGroup;\r\n  flashcards: IFlashcard[] = [];\r\n  collectionId: number = 0;\r\n\r\n  \r\n\r\n  constructor(\r\n    private _flashcardService: FlashcardService,\r\n    private _collectionFlashcardService: CollectionFlashcardService,\r\n    private _formbuilder: FormBuilder,\r\n    private _router: Router,\r\n    private _route: ActivatedRoute\r\n  ) {\r\n    this.collectionFlashcardForm = _formbuilder.group({\r\n      flashcardId: [''],\r\n      collectionId: [''],\r\n    })\r\n\r\n\r\n    // Automatic data insertion\r\n    forkJoin([\r\n      this._flashcardService.getFlashcards(),\r\n    ]).subscribe(\r\n      ([flashcards]) => {\r\n        this.flashcards = flashcards;\r\n        console.log(\"Retrieved flashcards: \", flashcards)\r\n        this.collectionFlashcardForm.patchValue({\r\n          flashcards: [],\r\n        });\r\n      },\r\n      (error) => {\r\n        console.error('Error fetching data:', error);\r\n      }\r\n    );\r\n  }\r\n\r\n  onSubmit() {\r\n    console.log(\"Selected Flashcard: \", this.collectionFlashcardForm.value);\r\n\r\n    const newCollectionFlashcards: ICollectionFlashcard[] = [];\r\n\r\n    for (let selectedFlashcard of this.collectionFlashcardForm.value.selectedFlashcards) {\r\n      const collectionFlashcard: ICollectionFlashcard = {\r\n        flashcardId: selectedFlashcard.flashcardId,\r\n        collectionId: this.collectionId\r\n      };\r\n\r\n      newCollectionFlashcards.push(collectionFlashcard);\r\n\r\n      console.log(\"Created collectionFlashcard Real \", collectionFlashcard);\r\n    }\r\n\r\n    this._collectionFlashcardService.addCollectionFlashcard(newCollectionFlashcards);\r\n\r\n    //this._collectionFlashcardService.getCollectionFlashcard().subscribe(\r\n    //  (collectionFlashcards) => {\r\n    //    this.collectionFlashcard = collectionFlashcards;\r\n    //    console.log(\"Retrieved collectionFlashcards after update: \", this.collectionFlashcard);\r\n    //  }\r\n/*    );*/\r\n\r\n\r\n    //console.log(\"Selected Flashcard: \", this.collectionForm.value.selectedFlashcards)\r\n    //for (let i of this.collectionForm.value.selectedFlashcards) {\r\n    //  const collectionFlashcard: ICollectionFlashcard = { flashcardId: i.flashcardId, collectionId: this.collectionId }\r\n    //  this.collectionFlashcardForm.patchValue({\r\n    //    flashcardId: collectionFlashcard.flashcardId,\r\n    //    collectionId: this.collectionId,\r\n    //  })\r\n    //  this._collectionFlashcardService.addCollectionFlashcard(this.collectionFlashcardForm);\r\n    //  console.log(\"Created collectionFlashcard Real \", collectionFlashcard)\r\n    //}\r\n\r\n    //this._collectionFlashcardService.getCollectionFlashcard().subscribe(\r\n    //  (collectionFlashcard) => {\r\n    //    this.collectionFlashcard = collectionFlashcard;\r\n    //    console.log(\"Retrieved collectionFlashcards after update: \", this.collectionFlashcard)\r\n    //  }\r\n    //)\r\n    \r\n\r\n    //const newCollection = this.collectionForm.value;\r\n    //console.log(\"newCollection: \", newCollection)\r\n\r\n    //if (this.isEditMode) {\r\n    //  console.log(\"sending collection: \", newCollection)\r\n    //  this._collectionService.updateCollection(this.collectionId, newCollection)\r\n    //    .subscribe(response => this.handleResponse(response));\r\n    //} else {\r\n    //  this._collectionService.createCollection(newCollection)\r\n    //    .subscribe(response => this.handleResponse(response));\r\n    //}\r\n  }\r\n\r\n  private handleResponse(response: any) {\r\n    if (response.success) {\r\n      console.log(response.message);\r\n      this._router.navigate(['/collections']);\r\n    } else {\r\n      console.log('Collection operation failed');\r\n    }\r\n  }\r\n\r\n  backToCollectionsFlashcard() {\r\n    this._router.navigate(['/collectionsFlashcard']);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this._route.params.subscribe(params => {\r\n        this.collectionId = +params['id']; // Convert to number\r\n        this.loadCollectionFlashcardsByCollectionId(this.collectionId);\r\n      })\r\n  }\r\n\r\n  loadCollectionFlashcardsByCollectionId(collectionId: number) {\r\n    this._collectionFlashcardService.getCollectionFlashcardByCollectionId(collectionId)\r\n      .subscribe(\r\n        (collectionFlashcard: any) => {\r\n          console.log('retrieved collectionFlashcard: ', collectionFlashcard)\r\n          this.collectionFlashcardForm.patchValue({\r\n            flashcardId: collectionFlashcard.flashcardId,\r\n            collectionId: collectionFlashcard.collectionId,\r\n          });\r\n        },\r\n        (error: any) => {\r\n          console.error('Error loading collection for edit:', error);\r\n        }\r\n      );\r\n  }\r\n}\r\n","<h2>{{isEditMode ? 'Update' : 'Create'}} Collection</h2>\r\n\r\n<form [formGroup]=\"collectionForm\" (ngSubmit)=\"onSubmit()\">\r\n  <div class=\"form-group\">\r\n    <label for=\"collectionName\">Name:</label>\r\n    <input type=\"text\" id=\"collectionName\" formControlName=\"collectionName\" class=\"form-control\" />\r\n  </div>\r\n  <div class=\"form-group\">\r\n    <label for=\"collectionFlashcard\">Add flashcards:</label>\r\n    <br />\r\n    <select multiple formControlName=\"selectedFlashcards\" style=\"width: 300px;\">\r\n      <option *ngFor=\"let flashcard of flashcards\" [ngValue]=\"flashcard\">{{flashcard.flashcardId}}. Term: {{flashcard.name}}, Definition: {{flashcard.description}}</option>\r\n    </select>\r\n  </div>\r\n\r\n  <button class=\"btn-primary btn\" type=\"submit\" [disabled]=\"collectionForm.invalid\">{{isEditMode ? 'Update' : 'Create'}} Collection</button>\r\n  <button class=\"btn btn-secondary\" (click)=\"backToCollections()\">Cancel</button>\r\n\r\n</form>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}