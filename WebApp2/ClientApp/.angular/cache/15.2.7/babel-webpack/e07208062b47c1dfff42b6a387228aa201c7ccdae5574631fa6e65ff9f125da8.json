{"ast":null,"code":"///////////////////////////////////////////////////////////////////// play.component.ts\nimport { __decorate } from \"tslib\";\nimport { Component, Input } from '@angular/core';\nlet PlayComponent = class PlayComponent {\n  constructor(flashcardService, _collectionFlashcardService, _route) {\n    this.flashcardService = flashcardService;\n    this._collectionFlashcardService = _collectionFlashcardService;\n    this._route = _route;\n    this.flashcards = [];\n    this.currentIndex = 0;\n    this.collectionId = 0;\n    this.collectionFlashcards = [];\n    this.dynamicProperties = [];\n  }\n  ngOnInit() {\n    this.loadFlashcards();\n    console.log(\"here is the flashcards after load\", this.flashcards);\n  }\n  loadFlashcards() {\n    this._route.params.subscribe(params => {\n      this.collectionId = params['id'];\n      this._collectionFlashcardService.getCollectionFlashcard().subscribe(collectionFlashcards => {\n        console.log(\"\", collectionFlashcards[0].collectionId);\n        for (let cf of collectionFlashcards) {\n          if (cf.collectionId == this.collectionId) {\n            // Add a separate object for dynamic properties\n            const dynamicProperty = {\n              showBack: false\n            };\n            this.dynamicProperties.push(dynamicProperty);\n            // Merge dynamic property into collectionFlashcard\n            cf = {\n              ...cf,\n              ...dynamicProperty\n            };\n            this.collectionFlashcards.push(cf);\n          }\n        }\n      });\n    });\n  }\n  showPreviousFlashcard() {\n    if (this.currentIndex > 0) {\n      this.currentIndex--;\n      this.resetCardSide();\n    }\n  }\n  showNextFlashcard() {\n    if (this.currentIndex < this.collectionFlashcards.length - 1) {\n      this.currentIndex++;\n      this.resetCardSide();\n    }\n  }\n  flipCard() {\n    this.dynamicProperties[this.currentIndex].showBack = !this.dynamicProperties[this.currentIndex].showBack;\n  }\n  resetCardSide() {\n    this.dynamicProperties.forEach(dp => dp.showBack = false);\n  }\n};\n__decorate([Input()], PlayComponent.prototype, \"flashcards\", void 0);\nPlayComponent = __decorate([Component({\n  selector: 'play',\n  templateUrl: './play.component.html'\n})], PlayComponent);\nexport { PlayComponent };\n//import { Component, Input, OnInit } from '@angular/core';\n//import { FormsModule, ReactiveFormsModule } from '@angular/forms';\n//import { HttpClientModule } from '@angular/common/http';\n//import { ActivatedRoute } from \"@angular/router\";\n//import { RouterModule } from '@angular/router';\n//import { FlashcardService } from '../Flashcards/flashcards.service';\n//import { CollectionFlashcardService } from \"../CollectionFlashcard/collectionFlashcards.service\";\n//import { ICollectionFlashcard } from \"../CollectionFlashcard/collectionFlashcard\";\n//@Component({\n//  selector: 'play',\n//  templateUrl: './play.component.html',\n//})\n//export class PlayComponent implements OnInit {\n//  @Input() flashcards: any[] = [];\n//  currentIndex: number = 0;\n//  collectionId: number = 0;\n//  collectionFlashcards: ICollectionFlashcard[] = [];\n//  constructor(private flashcardService: FlashcardService, private _collectionFlashcardService: CollectionFlashcardService, private _route: ActivatedRoute) { }\n//  ngOnInit(): void\n//  {\n//    this.loadFlashcards();\n//    console.log(\"here is the flashcards after load\", this.flashcards);\n//  }\n//  loadFlashcards(): void {\n//    this._route.params.subscribe(params => {\n//      this.collectionId = params['id']\n//      this._collectionFlashcardService.getCollectionFlashcard().subscribe(collectionFlashcards => {\n//        console.log(\"\", collectionFlashcards[0].collectionId)\n//        for (let cf of collectionFlashcards) {\n//          if (cf.collectionId == this.collectionId) {\n//            this.collectionFlashcards.push(cf);\n//          }\n//        }\n//      });\n//    });\n//  }\n//  showPreviousFlashcard(): void {\n//    if (this.currentIndex > 0) {\n//      this.currentIndex--;\n//    }\n//  }\n//  showNextFlashcard(): void {\n//    if (this.currentIndex < this.collectionFlashcards.length - 1) {\n//      this.currentIndex++;\n//    }\n//  }\n//flip(index: number): void {\n//  const content = document.getElementById('term' + index);\n//  if (this.flashcards[index] && this.flashcards[index].flashcard) {\n//    const flashcard = this.flashcards[index].flashcard;\n//    const name = flashcard.name;\n//    const description = flashcard.description;\n//    const imageUrl = flashcard.imageUrl;\n//    console.log('Name:', name);\n//    console.log('Description:', description);\n//    console.log('Image URL:', imageUrl);\n//    if (content) {\n//      if (content.innerHTML === description) {\n//        if (imageUrl) {\n//          content.innerHTML = name + '<br><img src=\"' + imageUrl + '\" alt=\"Flashcard Image\" class=\"img-fluid\">';\n//        } else {\n//          content.innerHTML = name;\n//        }\n//      } else {\n//        content.innerHTML = description;\n//      }\n//    } else {\n//      console.error(\"Content for index \" + index + \" not found.\");\n//    }\n//  } else {\n//    console.error(\"Flashcard[\" + index + \"] or flashcard not found.\");\n//  }\n//}","map":{"version":3,"mappings":"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","names":["Component","Input","PlayComponent","constructor","flashcardService","_collectionFlashcardService","_route","ngOnInit","loadFlashcards","console","log","flashcards","params","subscribe","collectionId","getCollectionFlashcard","collectionFlashcards","cf","dynamicProperty","showBack","dynamicProperties","push","showPreviousFlashcard","currentIndex","resetCardSide","showNextFlashcard","length","flipCard","forEach","dp","__decorate","selector","templateUrl"],"sourceRoot":"","sources":["C:\\Users\\William\\source\\repos\\WebApp2\\WebApp2\\ClientApp\\src\\app\\Play\\play.component.ts"],"sourcesContent":["///////////////////////////////////////////////////////////////////// play.component.ts\r\n\r\nimport { Component, Input, OnInit } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { ActivatedRoute } from \"@angular/router\";\r\nimport { RouterModule } from '@angular/router';\r\nimport { FlashcardService } from '../Flashcards/flashcards.service';\r\nimport { CollectionFlashcardService } from \"../CollectionFlashcard/collectionFlashcards.service\";\r\nimport { ICollectionFlashcard } from \"../CollectionFlashcard/collectionFlashcard\";\r\n\r\n@Component({\r\n  selector: 'play',\r\n  templateUrl: './play.component.html',\r\n})\r\nexport class PlayComponent implements OnInit {\r\n  @Input() flashcards: any[] = [];\r\n  currentIndex: number = 0;\r\n  collectionId: number = 0;\r\n  collectionFlashcards: ICollectionFlashcard[] = [];\r\n\r\n  constructor(private flashcardService: FlashcardService, private _collectionFlashcardService: CollectionFlashcardService, private _route: ActivatedRoute) { }\r\n\r\n  dynamicProperties: { showBack: boolean }[] = [];\r\n\r\n  ngOnInit(): void {\r\n    this.loadFlashcards();\r\n    console.log(\"here is the flashcards after load\", this.flashcards);\r\n  }\r\n\r\n  loadFlashcards(): void {\r\n    this._route.params.subscribe(params => {\r\n      this.collectionId = params['id']\r\n      this._collectionFlashcardService.getCollectionFlashcard().subscribe(collectionFlashcards => {\r\n        console.log(\"\", collectionFlashcards[0].collectionId)\r\n        for (let cf of collectionFlashcards) {\r\n          if (cf.collectionId == this.collectionId) {\r\n            // Add a separate object for dynamic properties\r\n            const dynamicProperty = { showBack: false };\r\n            this.dynamicProperties.push(dynamicProperty);\r\n\r\n            // Merge dynamic property into collectionFlashcard\r\n            cf = { ...cf, ...dynamicProperty };\r\n\r\n            this.collectionFlashcards.push(cf);\r\n          }\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  showPreviousFlashcard(): void {\r\n    if (this.currentIndex > 0) {\r\n      this.currentIndex--;\r\n      this.resetCardSide();\r\n    }\r\n  }\r\n\r\n  showNextFlashcard(): void {\r\n    if (this.currentIndex < this.collectionFlashcards.length - 1) {\r\n      this.currentIndex++;\r\n      this.resetCardSide();\r\n    }\r\n  }\r\n\r\n  flipCard(): void {\r\n    this.dynamicProperties[this.currentIndex].showBack = !this.dynamicProperties[this.currentIndex].showBack;\r\n  }\r\n\r\n  resetCardSide(): void {\r\n    this.dynamicProperties.forEach(dp => dp.showBack = false);\r\n  }\r\n\r\n}\r\n\r\n//import { Component, Input, OnInit } from '@angular/core';\r\n//import { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n//import { HttpClientModule } from '@angular/common/http';\r\n//import { ActivatedRoute } from \"@angular/router\";\r\n//import { RouterModule } from '@angular/router';\r\n//import { FlashcardService } from '../Flashcards/flashcards.service';\r\n//import { CollectionFlashcardService } from \"../CollectionFlashcard/collectionFlashcards.service\";\r\n//import { ICollectionFlashcard } from \"../CollectionFlashcard/collectionFlashcard\";\r\n\r\n\r\n//@Component({\r\n//  selector: 'play',\r\n//  templateUrl: './play.component.html',\r\n//})\r\n//export class PlayComponent implements OnInit {\r\n//  @Input() flashcards: any[] = [];\r\n//  currentIndex: number = 0;\r\n//  collectionId: number = 0;\r\n//  collectionFlashcards: ICollectionFlashcard[] = [];\r\n\r\n//  constructor(private flashcardService: FlashcardService, private _collectionFlashcardService: CollectionFlashcardService, private _route: ActivatedRoute) { }\r\n\r\n//  ngOnInit(): void\r\n//  {\r\n//    this.loadFlashcards();\r\n//    console.log(\"here is the flashcards after load\", this.flashcards);\r\n//  }\r\n\r\n//  loadFlashcards(): void {\r\n//    this._route.params.subscribe(params => {\r\n//      this.collectionId = params['id']\r\n//      this._collectionFlashcardService.getCollectionFlashcard().subscribe(collectionFlashcards => {\r\n//        console.log(\"\", collectionFlashcards[0].collectionId)\r\n//        for (let cf of collectionFlashcards) {\r\n//          if (cf.collectionId == this.collectionId) {\r\n//            this.collectionFlashcards.push(cf);\r\n//          }\r\n//        }\r\n//      });\r\n//    });\r\n\r\n//  }\r\n\r\n//  showPreviousFlashcard(): void {\r\n//    if (this.currentIndex > 0) {\r\n//      this.currentIndex--;\r\n//    }\r\n//  }\r\n\r\n//  showNextFlashcard(): void {\r\n//    if (this.currentIndex < this.collectionFlashcards.length - 1) {\r\n//      this.currentIndex++;\r\n//    }\r\n//  }\r\n\r\n\r\n  //flip(index: number): void {\r\n  //  const content = document.getElementById('term' + index);\r\n\r\n  //  if (this.flashcards[index] && this.flashcards[index].flashcard) {\r\n  //    const flashcard = this.flashcards[index].flashcard;\r\n  //    const name = flashcard.name;\r\n  //    const description = flashcard.description;\r\n  //    const imageUrl = flashcard.imageUrl;\r\n\r\n  //    console.log('Name:', name);\r\n  //    console.log('Description:', description);\r\n  //    console.log('Image URL:', imageUrl);\r\n\r\n  //    if (content) {\r\n  //      if (content.innerHTML === description) {\r\n  //        if (imageUrl) {\r\n  //          content.innerHTML = name + '<br><img src=\"' + imageUrl + '\" alt=\"Flashcard Image\" class=\"img-fluid\">';\r\n  //        } else {\r\n  //          content.innerHTML = name;\r\n  //        }\r\n  //      } else {\r\n  //        content.innerHTML = description;\r\n  //      }\r\n  //    } else {\r\n  //      console.error(\"Content for index \" + index + \" not found.\");\r\n  //    }\r\n  //  } else {\r\n  //    console.error(\"Flashcard[\" + index + \"] or flashcard not found.\");\r\n  //  }\r\n  //}\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}