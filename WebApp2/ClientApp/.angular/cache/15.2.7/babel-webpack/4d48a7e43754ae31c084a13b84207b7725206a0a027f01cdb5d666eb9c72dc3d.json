{"ast":null,"code":"import { Validators } from \"@angular/forms\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./collections.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/router\";\nexport class CollectionformComponent {\n  constructor(_collectionService, _formbuilder, _router, _route) {\n    this._collectionService = _collectionService;\n    this._formbuilder = _formbuilder;\n    this._router = _router;\n    this._route = _route;\n    this.isEditMode = false;\n    this.collectionId = -1;\n    this.collectionForm = _formbuilder.group({\n      collectionName: ['', Validators.required],\n      collectionDate: ['12'],\n      /*      collectionFlashcard: [''],*/\n      totalFlashcards: [0],\n      contributerId: [0]\n      /*      contributers: [''],*/\n    });\n  }\n\n  onSubmit() {\n    console.log(\"CollectionCreate form submitted:\");\n    console.log(this.collectionForm);\n    console.log(\"The collection \" + this.collectionForm.value + \" is created.\");\n    console.log(this.collectionForm.touched);\n    const newCollection = this.collectionForm.value;\n    if (this.isEditMode) {\n      this._collectionService.updateCollection(this.collectionId, newCollection).subscribe(response => {\n        if (response.success) {\n          console.log(response.message);\n          this._router.navigate(['/collections']);\n        } else {\n          console.log('Collection update failed');\n        }\n      });\n    } else {\n      this._collectionService.createCollection(newCollection).subscribe(response => {\n        if (response.success) {\n          console.log(response.message);\n          this._router.navigate(['/collections']);\n        } else {\n          console.log('Collections creation failed');\n        }\n      });\n    }\n  }\n  backToCollections() {\n    this._router.navigate(['/collections']);\n  }\n  ngOnInit() {\n    this._route.params.subscribe(params => {\n      if (params['mode'] === 'create') {\n        this.isEditMode = false; // Create mode\n      } else if (params['mode'] === 'edit') {\n        this.isEditMode = true; // Edit mode\n        this.collectionId = +params['id']; // Convert to number\n        this.loadCollectionForEdit(this.collectionId);\n      }\n    });\n  }\n  loadCollectionForEdit(collectionId) {\n    this._collectionService.getCollectionById(collectionId).subscribe(collection => {\n      console.log('retrived collection: ', collection);\n      this.collectionForm.patchValue({\n        collectionName: collection.collectionName,\n        collectionDate: new Date().getDate().toString() + \".\" + (new Date().getMonth() + 1).toString() + \".\" + new Date().getFullYear(),\n        /*            collectionFlashcard: collection.collectionFlashcard,*/\n        totalFlashcards: collection.totalFlashcard,\n        contributerId: collection.contributerId\n        /*            contributers: collection.contributers,*/\n      });\n    }, error => {\n      console.error('Error loading collection for edit:', error);\n    });\n  }\n}\nCollectionformComponent.ɵfac = function CollectionformComponent_Factory(t) {\n  return new (t || CollectionformComponent)(i0.ɵɵdirectiveInject(i1.CollectionService), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i3.ActivatedRoute));\n};\nCollectionformComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: CollectionformComponent,\n  selectors: [[\"app-collections-collectionform\"]],\n  decls: 11,\n  vars: 4,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"collectionName\"], [\"type\", \"text\", \"id\", \"collectionName\", \"formControlName\", \"collectionName\", 1, \"form-control\"], [\"type\", \"submit\", 1, \"btn-primary\", \"btn\", 3, \"disabled\"], [1, \"btn\", \"btn-secondary\", 3, \"click\"]],\n  template: function CollectionformComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h2\");\n      i0.ɵɵtext(1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function CollectionformComponent_Template_form_ngSubmit_2_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(3, \"div\", 1)(4, \"label\", 2);\n      i0.ɵɵtext(5, \"Name:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(6, \"input\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"button\", 4);\n      i0.ɵɵtext(8);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"button\", 5);\n      i0.ɵɵlistener(\"click\", function CollectionformComponent_Template_button_click_9_listener() {\n        return ctx.backToCollections();\n      });\n      i0.ɵɵtext(10, \"Cancel\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate1(\"\", ctx.isEditMode ? \"Update\" : \"Create\", \" Collection\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formGroup\", ctx.collectionForm);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"disabled\", ctx.collectionForm.invalid);\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate1(\"\", ctx.isEditMode ? \"Update\" : \"Create\", \" Collection\");\n    }\n  },\n  dependencies: [i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"AACA,SAAiCA,UAAU,QAA0C,gBAAgB;;;;;AASrG,OAAM,MAAOC,uBAAuB;EAKlCC,YAAoBC,kBAAqC,EAAUC,YAAyB,EAAUC,OAAe,EAAUC,MAAsB;IAAjI,uBAAkB,GAAlBH,kBAAkB;IAA6B,iBAAY,GAAZC,YAAY;IAAuB,YAAO,GAAPC,OAAO;IAAkB,WAAM,GAANC,MAAM;IAHrI,eAAU,GAAY,KAAK;IAC3B,iBAAY,GAAW,CAAC,CAAC;IAGvB,IAAI,CAACC,cAAc,GAAGH,YAAY,CAACI,KAAK,CAAC;MACvCC,cAAc,EAAE,CAAC,EAAE,EAAET,UAAU,CAACU,QAAQ,CAAC;MACzCC,cAAc,EAAE,CAAC,IAAI,CAAC;MAC5B;MACMC,eAAe,EAAE,CAAC,CAAC,CAAC;MACpBC,aAAa,EAAE,CAAC,CAAC;MACvB;KACK,CAAC;EACJ;;EAEAC,QAAQ;IACNC,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;IAC/CD,OAAO,CAACC,GAAG,CAAC,IAAI,CAACT,cAAc,CAAC;IAChCQ,OAAO,CAACC,GAAG,CAAC,iBAAiB,GAAG,IAAI,CAACT,cAAc,CAACU,KAAK,GAAG,cAAc,CAAC;IAC3EF,OAAO,CAACC,GAAG,CAAC,IAAI,CAACT,cAAc,CAACW,OAAO,CAAC;IACxC,MAAMC,aAAa,GAAG,IAAI,CAACZ,cAAc,CAACU,KAAK;IAE/C,IAAI,IAAI,CAACG,UAAU,EAAE;MACnB,IAAI,CAACjB,kBAAkB,CAACkB,gBAAgB,CAAC,IAAI,CAACC,YAAY,EAAEH,aAAa,CAAC,CACvEI,SAAS,CAACC,QAAQ,IAAG;QACpB,IAAIA,QAAQ,CAACC,OAAO,EAAE;UACpBV,OAAO,CAACC,GAAG,CAACQ,QAAQ,CAACE,OAAO,CAAC;UAC7B,IAAI,CAACrB,OAAO,CAACsB,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC;SACxC,MACI;UACHZ,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;;MAE3C,CAAC,CAAC;KACL,MACI;MACH,IAAI,CAACb,kBAAkB,CAACyB,gBAAgB,CAACT,aAAa,CAAC,CACpDI,SAAS,CAACC,QAAQ,IAAG;QACpB,IAAIA,QAAQ,CAACC,OAAO,EAAE;UACpBV,OAAO,CAACC,GAAG,CAACQ,QAAQ,CAACE,OAAO,CAAC;UAC7B,IAAI,CAACrB,OAAO,CAACsB,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC;SACxC,MACI;UACHZ,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;;MAE9C,CAAC,CAAC;;EAER;EAEAa,iBAAiB;IACf,IAAI,CAACxB,OAAO,CAACsB,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC;EACzC;EAEAG,QAAQ;IACN,IAAI,CAACxB,MAAM,CAACyB,MAAM,CAACR,SAAS,CAACQ,MAAM,IAAG;MACpC,IAAIA,MAAM,CAAC,MAAM,CAAC,KAAK,QAAQ,EAAE;QAC/B,IAAI,CAACX,UAAU,GAAG,KAAK,CAAC,CAAC;OAC1B,MAAM,IAAIW,MAAM,CAAC,MAAM,CAAC,KAAK,MAAM,EAAE;QACpC,IAAI,CAACX,UAAU,GAAG,IAAI,CAAC,CAAC;QACxB,IAAI,CAACE,YAAY,GAAG,CAACS,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;QACnC,IAAI,CAACC,qBAAqB,CAAC,IAAI,CAACV,YAAY,CAAC;;IAEjD,CAAC,CAAC;EACJ;EAEAU,qBAAqB,CAACV,YAAoB;IACxC,IAAI,CAACnB,kBAAkB,CAAC8B,iBAAiB,CAACX,YAAY,CAAC,CACpDC,SAAS,CACPW,UAAe,IAAI;MAClBnB,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEkB,UAAU,CAAC;MAChD,IAAI,CAAC3B,cAAc,CAAC4B,UAAU,CAAC;QAC7B1B,cAAc,EAAEyB,UAAU,CAACzB,cAAc;QACzCE,cAAc,EAAE,IAAIyB,IAAI,EAAE,CAACC,OAAO,EAAE,CAACC,QAAQ,EAAE,GAAG,GAAG,GAAG,CAAC,IAAIF,IAAI,EAAE,CAACG,QAAQ,EAAE,GAAG,CAAC,EAAED,QAAQ,EAAE,GAAG,GAAG,GAAG,IAAIF,IAAI,EAAE,CAACI,WAAW,EAAE;QAC3I;QACY5B,eAAe,EAAEsB,UAAU,CAACO,cAAc;QAC1C5B,aAAa,EAAEqB,UAAU,CAACrB;QACtC;OACW,CAAC;IACJ,CAAC,EACA6B,KAAU,IAAI;MACb3B,OAAO,CAAC2B,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;IAC5D,CAAC,CACF;EACL;;AAnFWzC,uBAAuB;mBAAvBA,uBAAuB;AAAA;AAAvBA,uBAAuB;QAAvBA,uBAAuB;EAAA0C;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCVpCC,0BAAI;MAAAA,YAA+C;MAAAA,iBAAK;MAExDA,+BAA2D;MAAxBA;QAAA,OAAYC,cAAU;MAAA,EAAC;MACxDD,8BAAwB;MACMA,qBAAK;MAAAA,iBAAQ;MACzCA,2BAA+F;MACjGA,iBAAM;MAUNA,iCAAkF;MAAAA,YAA+C;MAAAA,iBAAS;MAC1IA,iCAAgE;MAA9BA;QAAA,OAASC,uBAAmB;MAAA,EAAC;MAACD,uBAAM;MAAAA,iBAAS;;;MAjB7EA,eAA+C;MAA/CA,8EAA+C;MAE7CA,eAA4B;MAA5BA,8CAA4B;MAccA,eAAmC;MAAnCA,qDAAmC;MAACA,eAA+C;MAA/CA,8EAA+C","names":["Validators","CollectionformComponent","constructor","_collectionService","_formbuilder","_router","_route","collectionForm","group","collectionName","required","collectionDate","totalFlashcards","contributerId","onSubmit","console","log","value","touched","newCollection","isEditMode","updateCollection","collectionId","subscribe","response","success","message","navigate","createCollection","backToCollections","ngOnInit","params","loadCollectionForEdit","getCollectionById","collection","patchValue","Date","getDate","toString","getMonth","getFullYear","totalFlashcard","error","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["C:\\Users\\fmnil\\source\\repos\\WebApp2\\WebApp2\\ClientApp\\src\\app\\Collections\\collectionform.component.ts","C:\\Users\\fmnil\\source\\repos\\WebApp2\\WebApp2\\ClientApp\\src\\app\\Collections\\collectionform.component.html"],"sourcesContent":["import { Component } from \"@angular/core\";\r\nimport { FormGroup, FormControl, Validators, FormBuilder, ReactiveFormsModule } from \"@angular/forms\";\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { CollectionService } from './collections.service';\r\n\r\n@Component({\r\n  selector: \"app-collections-collectionform\",\r\n  templateUrl: \"./collectionform.component.html\"\r\n})\r\n\r\nexport class CollectionformComponent {\r\n  collectionForm: FormGroup;\r\n  isEditMode: boolean = false;\r\n  collectionId: number = -1;\r\n\r\n  constructor(private _collectionService: CollectionService, private _formbuilder: FormBuilder, private _router: Router, private _route: ActivatedRoute) {\r\n    this.collectionForm = _formbuilder.group({\r\n      collectionName: ['', Validators.required],\r\n      collectionDate: ['12'],\r\n/*      collectionFlashcard: [''],*/\r\n      totalFlashcards: [0],\r\n      contributerId: [0],\r\n/*      contributers: [''],*/\r\n    });\r\n  }\r\n\r\n  onSubmit() {\r\n    console.log(\"CollectionCreate form submitted:\");\r\n    console.log(this.collectionForm);\r\n    console.log(\"The collection \" + this.collectionForm.value + \" is created.\");\r\n    console.log(this.collectionForm.touched);\r\n    const newCollection = this.collectionForm.value;\r\n\r\n    if (this.isEditMode) {\r\n      this._collectionService.updateCollection(this.collectionId, newCollection)\r\n        .subscribe(response => {\r\n          if (response.success) {\r\n            console.log(response.message);\r\n            this._router.navigate(['/collections']);\r\n          }\r\n          else {\r\n            console.log('Collection update failed');\r\n          }\r\n        });\r\n    }\r\n    else {\r\n      this._collectionService.createCollection(newCollection)\r\n        .subscribe(response => {\r\n          if (response.success) {\r\n            console.log(response.message);\r\n            this._router.navigate(['/collections']);\r\n          }\r\n          else {\r\n            console.log('Collections creation failed');\r\n          }\r\n        });\r\n    }\r\n  }\r\n\r\n  backToCollections() {\r\n    this._router.navigate(['/collections']);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this._route.params.subscribe(params => {\r\n      if (params['mode'] === 'create') {\r\n        this.isEditMode = false; // Create mode\r\n      } else if (params['mode'] === 'edit') {\r\n        this.isEditMode = true; // Edit mode\r\n        this.collectionId = +params['id']; // Convert to number\r\n        this.loadCollectionForEdit(this.collectionId);\r\n      }\r\n    });\r\n  }\r\n\r\n  loadCollectionForEdit(collectionId: number) {\r\n    this._collectionService.getCollectionById(collectionId)\r\n      .subscribe(\r\n        (collection: any) => {\r\n          console.log('retrived collection: ', collection);\r\n          this.collectionForm.patchValue({\r\n            collectionName: collection.collectionName,\r\n            collectionDate: new Date().getDate().toString() + \".\" + (new Date().getMonth() + 1).toString() + \".\" + new Date().getFullYear(), \r\n/*            collectionFlashcard: collection.collectionFlashcard,*/\r\n            totalFlashcards: collection.totalFlashcard,\r\n            contributerId: collection.contributerId,\r\n/*            contributers: collection.contributers,*/\r\n          });\r\n        },\r\n        (error: any) => {\r\n          console.error('Error loading collection for edit:', error);\r\n        }\r\n      );\r\n  }\r\n}\r\n","<h2>{{isEditMode ? 'Update' : 'Create'}} Collection</h2>\r\n\r\n<form [formGroup]=\"collectionForm\" (ngSubmit)=\"onSubmit()\">\r\n  <div class=\"form-group\">\r\n    <label for=\"collectionName\">Name:</label>\r\n    <input type=\"text\" id=\"collectionName\" formControlName=\"collectionName\" class=\"form-control\" />\r\n  </div>\r\n\r\n  <!--<div class=\"form-group\">\r\n    <label for=\"collectionFlashcard\">Add flashcards:</label>\r\n    <br />\r\n    <select multiple formControlName=\"selectedFlashcards\" style=\"width: 300px;\">\r\n      <option *ngFor=\"let flashcard of flashcards\" [ngValue]=\"flashcard\">{{flashcard.flashcardId}}. Term: {{flashcard.name}}, Definition: {{flashcard.description}}</option>\r\n    </select>\r\n  </div>-->\r\n\r\n  <button class=\"btn-primary btn\" type=\"submit\" [disabled]=\"collectionForm.invalid\">{{isEditMode ? 'Update' : 'Create'}} Collection</button>\r\n  <button class=\"btn btn-secondary\" (click)=\"backToCollections()\">Cancel</button>\r\n\r\n</form>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}