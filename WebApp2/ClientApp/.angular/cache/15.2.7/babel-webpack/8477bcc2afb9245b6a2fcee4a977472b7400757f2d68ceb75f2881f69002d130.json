{"ast":null,"code":"import { Validators } from \"@angular/forms\";\nimport { forkJoin } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./collections.service\";\nimport * as i2 from \"../Flashcards/flashcards.service\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"@angular/common\";\nfunction CollectionformComponent_option_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 9);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const flashcard_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngValue\", flashcard_r1);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate3(\"\", flashcard_r1.flashcardId, \". Term: \", flashcard_r1.name, \", Definition: \", flashcard_r1.description, \"\");\n  }\n}\n;\nexport class CollectionformComponent {\n  constructor(_collectionService, _flashcardService, _formbuilder, _router, _route) {\n    this._collectionService = _collectionService;\n    this._flashcardService = _flashcardService;\n    this._formbuilder = _formbuilder;\n    this._router = _router;\n    this._route = _route;\n    this.isEditMode = false;\n    this.collectionId = -1;\n    this.flashcards = [];\n    this.originalCollection = [];\n    this.collectionForm = _formbuilder.group({\n      collectionName: ['', Validators.required],\n      flashcards: [[]]\n    });\n    // Automatic data insertion\n    forkJoin([this._flashcardService.getFlashcards()]).subscribe(([flashcards]) => {\n      this.flashcards = flashcards;\n      this.collectionForm.patchValue({\n        collectionDate: new Date().getDate() + \".\" + (new Date().getMonth() + 1) + \".\" + new Date().getFullYear(),\n        flashcards: []\n      });\n    }, error => {\n      console.error('Error fetching data:', error);\n    });\n  }\n  onSubmit() {\n    console.log(\"CollectionCreate form submitted:\");\n    console.log(\"The collection \" + this.collectionForm.value.collectionName + \" is created.\");\n    console.log(\"Touched? \" + this.collectionForm.touched);\n    console.log(\"this.collectionform.value.flashcards\", this.collectionForm.value.flashcards);\n    console.log(\"Original collection: \", this.originalCollection);\n    if (this.isEditMode) {\n      for (let f of this.collectionForm.value.flashcards) if (this.originalCollection.includes(f)) {\n        console.log(\"Duplicate: \", f);\n        this.collectionForm.value.flashcards.remove(f);\n      }\n    }\n    const newCollection = this.collectionForm.value;\n    if (this.isEditMode) {\n      this._collectionService.updateCollection(this.collectionId, newCollection).subscribe(response => this.handleResponse(response));\n    } else {\n      this._collectionService.createCollection(newCollection).subscribe(response => this.handleResponse(response));\n    }\n  }\n  handleResponse(response) {\n    if (response.success) {\n      console.log(response.message);\n      this._router.navigate(['/collections']);\n    } else {\n      console.log('Collection operation failed');\n    }\n  }\n  backToCollections() {\n    this._router.navigate(['/collections']);\n  }\n  ngOnInit() {\n    this._route.params.subscribe(params => {\n      if (params['mode'] === 'create') {\n        this.isEditMode = false; // Create mode\n      } else if (params['mode'] === 'edit') {\n        this.isEditMode = true; // Edit mode\n        this.collectionId = +params['id']; // Convert to number\n        this.loadCollectionForEdit(this.collectionId);\n      }\n    });\n  }\n  loadCollectionForEdit(collectionId) {\n    this._collectionService.getCollectionById(collectionId).subscribe(collection => {\n      this.originalCollection = collection;\n      console.log('retrieved collection: ', this.originalCollection);\n      this.collectionForm.patchValue({\n        collectionName: collection.collectionName,\n        flashcards: collection.flashcards // Assuming 'flashcards' is the property name in your collection model\n      });\n    }, error => {\n      console.error('Error loading collection for edit:', error);\n    });\n  }\n}\nCollectionformComponent.ɵfac = function CollectionformComponent_Factory(t) {\n  return new (t || CollectionformComponent)(i0.ɵɵdirectiveInject(i1.CollectionService), i0.ɵɵdirectiveInject(i2.FlashcardService), i0.ɵɵdirectiveInject(i3.FormBuilder), i0.ɵɵdirectiveInject(i4.Router), i0.ɵɵdirectiveInject(i4.ActivatedRoute));\n};\nCollectionformComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: CollectionformComponent,\n  selectors: [[\"app-collections-collectionform\"]],\n  decls: 17,\n  vars: 5,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"collectionName\"], [\"type\", \"text\", \"id\", \"collectionName\", \"formControlName\", \"collectionName\", 1, \"form-control\"], [\"for\", \"collectionFlashcard\"], [\"multiple\", \"\", \"formControlName\", \"flashcards\", 2, \"width\", \"300px\"], [3, \"ngValue\", 4, \"ngFor\", \"ngForOf\"], [\"type\", \"submit\", 1, \"btn-primary\", \"btn\", 3, \"disabled\"], [1, \"btn\", \"btn-secondary\", 3, \"click\"], [3, \"ngValue\"]],\n  template: function CollectionformComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h2\");\n      i0.ɵɵtext(1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function CollectionformComponent_Template_form_ngSubmit_2_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(3, \"div\", 1)(4, \"label\", 2);\n      i0.ɵɵtext(5, \"Name:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(6, \"input\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"div\", 1)(8, \"label\", 4);\n      i0.ɵɵtext(9, \"Add flashcards:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(10, \"br\");\n      i0.ɵɵelementStart(11, \"select\", 5);\n      i0.ɵɵtemplate(12, CollectionformComponent_option_12_Template, 2, 4, \"option\", 6);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(13, \"button\", 7);\n      i0.ɵɵtext(14);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"button\", 8);\n      i0.ɵɵlistener(\"click\", function CollectionformComponent_Template_button_click_15_listener() {\n        return ctx.backToCollections();\n      });\n      i0.ɵɵtext(16, \"Cancel\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate1(\"\", ctx.isEditMode ? \"Update\" : \"Create\", \" Collection\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formGroup\", ctx.collectionForm);\n      i0.ɵɵadvance(10);\n      i0.ɵɵproperty(\"ngForOf\", ctx.flashcards);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"disabled\", ctx.collectionForm.invalid);\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate1(\"\", ctx.isEditMode ? \"Update\" : \"Create\", \" Collection\");\n    }\n  },\n  dependencies: [i5.NgForOf, i3.ɵNgNoValidate, i3.NgSelectOption, i3.ɵNgSelectMultipleOption, i3.DefaultValueAccessor, i3.SelectMultipleControlValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"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","names":["Validators","forkJoin","i0","CollectionformComponent","constructor","_collectionService","_flashcardService","_formbuilder","_router","_route","collectionForm","group","collectionName","required","flashcards","getFlashcards","subscribe","patchValue","collectionDate","Date","getDate","getMonth","getFullYear","error","console","onSubmit","log","value","touched","originalCollection","isEditMode","f","includes","remove","newCollection","updateCollection","collectionId","response","handleResponse","createCollection","success","message","navigate","backToCollections","ngOnInit","params","loadCollectionForEdit","getCollectionById","collection","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\fmnil\\source\\repos\\WebApp2\\WebApp2\\ClientApp\\src\\app\\Collections\\collectionform.component.ts","C:\\Users\\fmnil\\source\\repos\\WebApp2\\WebApp2\\ClientApp\\src\\app\\Collections\\collectionform.component.html"],"sourcesContent":["import { Component } from \"@angular/core\";\r\nimport { FormGroup, FormBuilder, Validators } from \"@angular/forms\";\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { CollectionService } from './collections.service';\r\nimport { IFlashcard } from '../Flashcards/flashcard';;\r\nimport { ICollection } from './collection';\r\nimport { FlashcardService } from '../Flashcards/flashcards.service';\r\nimport { forkJoin } from 'rxjs';\r\n\r\n@Component({\r\n  selector: \"app-collections-collectionform\",\r\n  templateUrl: \"./collectionform.component.html\"\r\n})\r\n\r\nexport class CollectionformComponent {\r\n  collectionForm: FormGroup;\r\n  isEditMode: boolean = false;\r\n  collectionId: number = -1;\r\n  flashcards: IFlashcard[] = [];\r\n  originalCollection: ICollection[] = [];\r\n\r\n  constructor(\r\n    private _collectionService: CollectionService,\r\n    private _flashcardService: FlashcardService,\r\n    private _formbuilder: FormBuilder,\r\n    private _router: Router,\r\n    private _route: ActivatedRoute\r\n  ) {\r\n    this.collectionForm = _formbuilder.group({\r\n      collectionName: ['', Validators.required],\r\n      flashcards: [[]],\r\n    });\r\n\r\n    // Automatic data insertion\r\n    forkJoin([\r\n      this._flashcardService.getFlashcards(),\r\n    ]).subscribe(\r\n      ([flashcards]) => {\r\n        this.flashcards = flashcards;\r\n        this.collectionForm.patchValue({\r\n          collectionDate: new Date().getDate() + \".\" + (new Date().getMonth() + 1) + \".\" + new Date().getFullYear(),\r\n          flashcards: [],\r\n        });\r\n      },\r\n      (error) => {\r\n        console.error('Error fetching data:', error);\r\n      }\r\n    );\r\n  }\r\n\r\n  onSubmit() {\r\n    console.log(\"CollectionCreate form submitted:\");\r\n    console.log(\"The collection \" + this.collectionForm.value.collectionName + \" is created.\");\r\n    console.log(\"Touched? \" + this.collectionForm.touched);\r\n    console.log(\"this.collectionform.value.flashcards\", this.collectionForm.value.flashcards);\r\n    console.log(\"Original collection: \", this.originalCollection)\r\n\r\n    if (this.isEditMode) {\r\n      for (let f of this.collectionForm.value.flashcards)\r\n        if (this.originalCollection.includes(f)) {\r\n          console.log(\"Duplicate: \", f)\r\n          this.collectionForm.value.flashcards.remove(f)\r\n        }\r\n      }\r\n\r\n\r\n\r\n\r\n    const newCollection = this.collectionForm.value;\r\n\r\n    if (this.isEditMode) {\r\n      this._collectionService.updateCollection(this.collectionId, newCollection)\r\n        .subscribe(response => this.handleResponse(response));\r\n    } else {\r\n      this._collectionService.createCollection(newCollection)\r\n        .subscribe(response => this.handleResponse(response));\r\n    }\r\n  }\r\n\r\n  private handleResponse(response: any) {\r\n    if (response.success) {\r\n      console.log(response.message);\r\n      this._router.navigate(['/collections']);\r\n    } else {\r\n      console.log('Collection operation failed');\r\n    }\r\n  }\r\n\r\n  backToCollections() {\r\n    this._router.navigate(['/collections']);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this._route.params.subscribe(params => {\r\n      if (params['mode'] === 'create') {\r\n        this.isEditMode = false; // Create mode\r\n      } else if (params['mode'] === 'edit') {\r\n        this.isEditMode = true; // Edit mode\r\n        this.collectionId = +params['id']; // Convert to number\r\n        this.loadCollectionForEdit(this.collectionId);\r\n      }\r\n    });\r\n  }\r\n\r\n  loadCollectionForEdit(collectionId: number) {\r\n    this._collectionService.getCollectionById(collectionId)\r\n      .subscribe(\r\n        (collection: any) => {\r\n          this.originalCollection = collection;\r\n          console.log('retrieved collection: ', this.originalCollection)\r\n          this.collectionForm.patchValue({\r\n            collectionName: collection.collectionName,\r\n            flashcards: collection.flashcards, // Assuming 'flashcards' is the property name in your collection model\r\n          });\r\n        },\r\n        (error: any) => {\r\n          console.error('Error loading collection for edit:', error);\r\n        }\r\n      );\r\n  }\r\n}\r\n","<h2>{{isEditMode ? 'Update' : 'Create'}} Collection</h2>\r\n\r\n<form [formGroup]=\"collectionForm\" (ngSubmit)=\"onSubmit()\">\r\n  <div class=\"form-group\">\r\n    <label for=\"collectionName\">Name:</label>\r\n    <input type=\"text\" id=\"collectionName\" formControlName=\"collectionName\" class=\"form-control\" />\r\n  </div>\r\n  <div class=\"form-group\">\r\n    <label for=\"collectionFlashcard\">Add flashcards:</label>\r\n    <br />\r\n    <select multiple formControlName=\"flashcards\" style=\"width: 300px;\">\r\n      <option *ngFor=\"let flashcard of flashcards\" [ngValue]=\"flashcard\">{{flashcard.flashcardId}}. Term: {{flashcard.name}}, Definition: {{flashcard.description}}</option>\r\n    </select>\r\n  </div>\r\n\r\n  <button class=\"btn-primary btn\" type=\"submit\" [disabled]=\"collectionForm.invalid\">{{isEditMode ? 'Update' : 'Create'}} Collection</button>\r\n  <button class=\"btn btn-secondary\" (click)=\"backToCollections()\">Cancel</button>\r\n</form>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}