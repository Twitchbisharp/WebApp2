{"ast":null,"code":"\"use strict\";\n\n//import { Component, OnInit } from \"@angular/core\";\n//import { FormGroup, FormBuilder, Validators } from \"@angular/forms\";\n//import { ActivatedRoute, Router } from \"@angular/router\";\n//import { IFlashcard } from '../Flashcards/flashcard';;\n//import { ICollection } from '../Collections/collection';\n//import { ICollectionFlashcard } from './collectionFlashcard';\n//import { CollectionFlashcardService } from './collectionFlashcards.service';\n//import { FlashcardService } from '../Flashcards/flashcards.service';\n//import { forkJoin } from 'rxjs';\n//@Component({\n//  selector: \"app-collections-collectionform\",\n//  templateUrl: \"./collectionFlashcardForm.component.html\"\n//})\n//export class CollectionFlashcardForm implements OnInit{\n//  collectionFlashcardForm: FormGroup;\n//  flashcards: IFlashcard[] = [];\n//  collectionId: number = 0;\n//  constructor(\n//    private _flashcardService: FlashcardService,\n//    private _collectionFlashcardService: CollectionFlashcardService,\n//    private _formbuilder: FormBuilder,\n//    private _router: Router,\n//    private _route: ActivatedRoute\n//  ) {\n//    this.collectionFlashcardForm = _formbuilder.group({\n//      flashcardId: [''],\n//      collectionId: [''],\n//    })\n//    // Automatic data insertion\n//    forkJoin([\n//      this._flashcardService.getFlashcards(),\n//    ]).subscribe(\n//      ([flashcards]) => {\n//        this.flashcards = flashcards;\n//        console.log(\"Retrieved flashcards: \", flashcards)\n//        this.collectionFlashcardForm.patchValue({\n//          flashcards: [],\n//        });\n//      },\n//      (error) => {\n//        console.error('Error fetching data:', error);\n//      }\n//    );\n//  }\n//  onSubmit() {\n//    console.log(\"Selected Flashcard: \", this.collectionFlashcardForm.value);\n//    const newCollectionFlashcards: ICollectionFlashcard[] = [];\n//    for (let selectedFlashcard of this.collectionFlashcardForm.value.selectedFlashcards) {\n//      const collectionFlashcard: ICollectionFlashcard = {\n//        flashcardId: selectedFlashcard.flashcardId,\n//        collectionId: this.collectionId\n//      };\n//      newCollectionFlashcards.push(collectionFlashcard);\n//      console.log(\"Created collectionFlashcard Real \", collectionFlashcard);\n//    }\n//    this._collectionFlashcardService.addCollectionFlashcard(newCollectionFlashcards);\n//    //this._collectionFlashcardService.getCollectionFlashcard().subscribe(\n//    //  (collectionFlashcards) => {\n//    //    this.collectionFlashcard = collectionFlashcards;\n//    //    console.log(\"Retrieved collectionFlashcards after update: \", this.collectionFlashcard);\n//    //  }\n///*    );*/\n//    //console.log(\"Selected Flashcard: \", this.collectionForm.value.selectedFlashcards)\n//    //for (let i of this.collectionForm.value.selectedFlashcards) {\n//    //  const collectionFlashcard: ICollectionFlashcard = { flashcardId: i.flashcardId, collectionId: this.collectionId }\n//    //  this.collectionFlashcardForm.patchValue({\n//    //    flashcardId: collectionFlashcard.flashcardId,\n//    //    collectionId: this.collectionId,\n//    //  })\n//    //  this._collectionFlashcardService.addCollectionFlashcard(this.collectionFlashcardForm);\n//    //  console.log(\"Created collectionFlashcard Real \", collectionFlashcard)\n//    //}\n//    //this._collectionFlashcardService.getCollectionFlashcard().subscribe(\n//    //  (collectionFlashcard) => {\n//    //    this.collectionFlashcard = collectionFlashcard;\n//    //    console.log(\"Retrieved collectionFlashcards after update: \", this.collectionFlashcard)\n//    //  }\n//    //)\n//    //const newCollection = this.collectionForm.value;\n//    //console.log(\"newCollection: \", newCollection)\n//    //if (this.isEditMode) {\n//    //  console.log(\"sending collection: \", newCollection)\n//    //  this._collectionService.updateCollection(this.collectionId, newCollection)\n//    //    .subscribe(response => this.handleResponse(response));\n//    //} else {\n//    //  this._collectionService.createCollection(newCollection)\n//    //    .subscribe(response => this.handleResponse(response));\n//    //}\n//  }\n//  private handleResponse(response: any) {\n//    if (response.success) {\n//      console.log(response.message);\n//      this._router.navigate(['/collections']);\n//    } else {\n//      console.log('Collection operation failed');\n//    }\n//  }\n//  backToCollectionsFlashcard() {\n//    this._router.navigate(['/collectionsFlashcard']);\n//  }\n//  ngOnInit(): void {\n//    this._route.params.subscribe(params => {\n//        this.collectionId = +params['id']; // Convert to number\n//        this.loadCollectionFlashcardsByCollectionId(this.collectionId);\n//      })\n//  }\n//  loadCollectionFlashcardsByCollectionId(collectionId: number) {\n//    this._collectionFlashcardService.getCollectionFlashcardByCollectionId(collectionId)\n//      .subscribe(\n//        (collectionFlashcard: any) => {\n//          console.log('retrieved collectionFlashcard: ', collectionFlashcard)\n//          this.collectionFlashcardForm.patchValue({\n//            flashcardId: collectionFlashcard.flashcardId,\n//            collectionId: collectionFlashcard.collectionId,\n//          });\n//        },\n//        (error: any) => {\n//          console.error('Error loading collection for edit:', error);\n//        }\n//      );\n//  }\n//}","map":{"version":3,"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","names":[],"sourceRoot":"","sources":["C:\\Users\\William\\Source\\Repos\\WebApp2\\WebApp2\\ClientApp\\src\\app\\CollectionFlashcard\\collectionFlashcardform.component.ts"],"sourcesContent":["//import { Component, OnInit } from \"@angular/core\";\r\n//import { FormGroup, FormBuilder, Validators } from \"@angular/forms\";\r\n//import { ActivatedRoute, Router } from \"@angular/router\";\r\n//import { IFlashcard } from '../Flashcards/flashcard';;\r\n//import { ICollection } from '../Collections/collection';\r\n//import { ICollectionFlashcard } from './collectionFlashcard';\r\n//import { CollectionFlashcardService } from './collectionFlashcards.service';\r\n//import { FlashcardService } from '../Flashcards/flashcards.service';\r\n//import { forkJoin } from 'rxjs';\r\n\r\n//@Component({\r\n//  selector: \"app-collections-collectionform\",\r\n//  templateUrl: \"./collectionFlashcardForm.component.html\"\r\n//})\r\n\r\n//export class CollectionFlashcardForm implements OnInit{\r\n//  collectionFlashcardForm: FormGroup;\r\n//  flashcards: IFlashcard[] = [];\r\n//  collectionId: number = 0;\r\n\r\n  \r\n\r\n//  constructor(\r\n//    private _flashcardService: FlashcardService,\r\n//    private _collectionFlashcardService: CollectionFlashcardService,\r\n//    private _formbuilder: FormBuilder,\r\n//    private _router: Router,\r\n//    private _route: ActivatedRoute\r\n//  ) {\r\n//    this.collectionFlashcardForm = _formbuilder.group({\r\n//      flashcardId: [''],\r\n//      collectionId: [''],\r\n//    })\r\n\r\n\r\n//    // Automatic data insertion\r\n//    forkJoin([\r\n//      this._flashcardService.getFlashcards(),\r\n//    ]).subscribe(\r\n//      ([flashcards]) => {\r\n//        this.flashcards = flashcards;\r\n//        console.log(\"Retrieved flashcards: \", flashcards)\r\n//        this.collectionFlashcardForm.patchValue({\r\n//          flashcards: [],\r\n//        });\r\n//      },\r\n//      (error) => {\r\n//        console.error('Error fetching data:', error);\r\n//      }\r\n//    );\r\n//  }\r\n\r\n//  onSubmit() {\r\n//    console.log(\"Selected Flashcard: \", this.collectionFlashcardForm.value);\r\n\r\n//    const newCollectionFlashcards: ICollectionFlashcard[] = [];\r\n\r\n//    for (let selectedFlashcard of this.collectionFlashcardForm.value.selectedFlashcards) {\r\n//      const collectionFlashcard: ICollectionFlashcard = {\r\n//        flashcardId: selectedFlashcard.flashcardId,\r\n//        collectionId: this.collectionId\r\n//      };\r\n\r\n//      newCollectionFlashcards.push(collectionFlashcard);\r\n\r\n//      console.log(\"Created collectionFlashcard Real \", collectionFlashcard);\r\n//    }\r\n\r\n//    this._collectionFlashcardService.addCollectionFlashcard(newCollectionFlashcards);\r\n\r\n//    //this._collectionFlashcardService.getCollectionFlashcard().subscribe(\r\n//    //  (collectionFlashcards) => {\r\n//    //    this.collectionFlashcard = collectionFlashcards;\r\n//    //    console.log(\"Retrieved collectionFlashcards after update: \", this.collectionFlashcard);\r\n//    //  }\r\n///*    );*/\r\n\r\n\r\n//    //console.log(\"Selected Flashcard: \", this.collectionForm.value.selectedFlashcards)\r\n//    //for (let i of this.collectionForm.value.selectedFlashcards) {\r\n//    //  const collectionFlashcard: ICollectionFlashcard = { flashcardId: i.flashcardId, collectionId: this.collectionId }\r\n//    //  this.collectionFlashcardForm.patchValue({\r\n//    //    flashcardId: collectionFlashcard.flashcardId,\r\n//    //    collectionId: this.collectionId,\r\n//    //  })\r\n//    //  this._collectionFlashcardService.addCollectionFlashcard(this.collectionFlashcardForm);\r\n//    //  console.log(\"Created collectionFlashcard Real \", collectionFlashcard)\r\n//    //}\r\n\r\n//    //this._collectionFlashcardService.getCollectionFlashcard().subscribe(\r\n//    //  (collectionFlashcard) => {\r\n//    //    this.collectionFlashcard = collectionFlashcard;\r\n//    //    console.log(\"Retrieved collectionFlashcards after update: \", this.collectionFlashcard)\r\n//    //  }\r\n//    //)\r\n    \r\n\r\n//    //const newCollection = this.collectionForm.value;\r\n//    //console.log(\"newCollection: \", newCollection)\r\n\r\n//    //if (this.isEditMode) {\r\n//    //  console.log(\"sending collection: \", newCollection)\r\n//    //  this._collectionService.updateCollection(this.collectionId, newCollection)\r\n//    //    .subscribe(response => this.handleResponse(response));\r\n//    //} else {\r\n//    //  this._collectionService.createCollection(newCollection)\r\n//    //    .subscribe(response => this.handleResponse(response));\r\n//    //}\r\n//  }\r\n\r\n//  private handleResponse(response: any) {\r\n//    if (response.success) {\r\n//      console.log(response.message);\r\n//      this._router.navigate(['/collections']);\r\n//    } else {\r\n//      console.log('Collection operation failed');\r\n//    }\r\n//  }\r\n\r\n//  backToCollectionsFlashcard() {\r\n//    this._router.navigate(['/collectionsFlashcard']);\r\n//  }\r\n\r\n//  ngOnInit(): void {\r\n//    this._route.params.subscribe(params => {\r\n//        this.collectionId = +params['id']; // Convert to number\r\n//        this.loadCollectionFlashcardsByCollectionId(this.collectionId);\r\n//      })\r\n//  }\r\n\r\n//  loadCollectionFlashcardsByCollectionId(collectionId: number) {\r\n//    this._collectionFlashcardService.getCollectionFlashcardByCollectionId(collectionId)\r\n//      .subscribe(\r\n//        (collectionFlashcard: any) => {\r\n//          console.log('retrieved collectionFlashcard: ', collectionFlashcard)\r\n//          this.collectionFlashcardForm.patchValue({\r\n//            flashcardId: collectionFlashcard.flashcardId,\r\n//            collectionId: collectionFlashcard.collectionId,\r\n//          });\r\n//        },\r\n//        (error: any) => {\r\n//          console.error('Error loading collection for edit:', error);\r\n//        }\r\n//      );\r\n//  }\r\n//}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}