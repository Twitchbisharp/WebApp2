{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from \"@angular/core\";\n;\nimport { forkJoin } from 'rxjs';\nlet CollectionformComponent = class CollectionformComponent {\n  constructor(_collectionService, _flashcardService, _collectionFlashcardService, _formbuilder, _router, _route) {\n    this._collectionService = _collectionService;\n    this._flashcardService = _flashcardService;\n    this._collectionFlashcardService = _collectionFlashcardService;\n    this._formbuilder = _formbuilder;\n    this._router = _router;\n    this._route = _route;\n    this.isEditMode = false;\n    this.collectionId = -1;\n    this.flashcards = [];\n    this.originalCollection = [];\n    this.collectionFlashcard = [];\n    this.dropdownOptions = this.flashcards;\n    this.selectedFlashcards = [];\n    this.selectionGroup = _formbuilder.group({\n      selectedFlashcards: ['']\n    });\n    this.collectionForm = _formbuilder.group({\n      collectionId: [''],\n      collectionDate: new Date().getDate() + \".\" + (new Date().getMonth() + 1) + \".\" + new Date().getFullYear(),\n      collectionName: [''],\n      collectionFlashcard: [''],\n      totalFlashcards: [''],\n      contributerId: [''],\n      contributers: ['']\n    });\n    // Automatic data insertion\n    forkJoin([this._flashcardService.getFlashcards()]).subscribe(([flashcards]) => {\n      this.flashcards = flashcards;\n      console.log(\"Retrieved flashcards: \", flashcards);\n      this.collectionForm.patchValue({\n        /*collectionDate: new Date().getDate() + \".\" + (new Date().getMonth() + 1) + \".\" + new Date().getFullYear(),*/\n        flashcards: []\n      });\n    }, error => {\n      console.error('Error fetching data:', error);\n    });\n  }\n  onSubmit() {\n    console.log(\"Selected Flashcard: \", this.selectedFlashcards);\n    for (let i of this.collectionFlashcard) {\n      this._collectionFlashcardService.addCollectionFlashcard(i);\n      console.log(\"Created collectionflashcard\", i);\n    }\n    const newCollection = this.collectionForm.value;\n    console.log(\"newCollection: \", newCollection);\n    if (this.isEditMode) {\n      console.log(\"sending collection: \", newCollection);\n      this._collectionService.updateCollection(this.collectionId, newCollection).subscribe(response => this.handleResponse(response));\n    } else {\n      this._collectionService.createCollection(newCollection).subscribe(response => this.handleResponse(response));\n    }\n  }\n  handleResponse(response) {\n    if (response.success) {\n      console.log(response.message);\n      this._router.navigate(['/collections']);\n    } else {\n      console.log('Collection operation failed');\n    }\n  }\n  backToCollections() {\n    this._router.navigate(['/collections']);\n  }\n  ngOnInit() {\n    this._route.params.subscribe(params => {\n      if (params['mode'] === 'create') {\n        this.isEditMode = false; // Create mode\n      } else if (params['mode'] === 'edit') {\n        this.isEditMode = true; // Edit mode\n        this.collectionId = +params['id']; // Convert to number\n        this.loadCollectionForEdit(this.collectionId);\n      }\n    });\n  }\n  loadCollectionForEdit(collectionId) {\n    this._collectionService.getCollectionById(collectionId).subscribe(collection => {\n      this.originalCollection = collection;\n      console.log('retrieved collection: ', collection);\n      this.collectionForm.patchValue({\n        collectionName: collection.collectionName,\n        collectionFlashcard: collection.collectionFlashcard,\n        collectionDate: collection.collectionDate,\n        totalFlashcards: collection.totalFlashcards,\n        contributerId: collection.contributerId,\n        contributers: collection.contributers\n      });\n    }, error => {\n      console.error('Error loading collection for edit:', error);\n    });\n  }\n};\nCollectionformComponent = __decorate([Component({\n  selector: \"app-collections-collectionform\",\n  templateUrl: \"./collectionform.component.html\"\n})], CollectionformComponent);\nexport { CollectionformComponent };","map":{"version":3,"mappings":"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","names":["Component","forkJoin","CollectionformComponent","constructor","_collectionService","_flashcardService","_collectionFlashcardService","_formbuilder","_router","_route","flashcards","selectionGroup","group","selectedFlashcards","collectionForm","collectionId","collectionDate","Date","getDate","getMonth","getFullYear","collectionName","collectionFlashcard","totalFlashcards","contributerId","contributers","getFlashcards","subscribe","console","log","patchValue","error","onSubmit","i","addCollectionFlashcard","newCollection","value","isEditMode","updateCollection","response","handleResponse","createCollection","success","message","navigate","backToCollections","ngOnInit","params","loadCollectionForEdit","getCollectionById","collection","originalCollection","selector","templateUrl"],"sourceRoot":"","sources":["C:\\Users\\fmnil\\source\\repos\\WebApp2\\WebApp2\\ClientApp\\src\\app\\Collections\\collectionform.component.ts"],"sourcesContent":["import { Component, ViewChild, ElementRef } from \"@angular/core\";\r\nimport { FormGroup, FormBuilder, Validators } from \"@angular/forms\";\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { CollectionService } from './collections.service';\r\nimport { IFlashcard } from '../Flashcards/flashcard';;\r\nimport { ICollection } from './collection';\r\nimport { ICollectionFlashcard } from '../CollectionFlashcard/collectionFlashcard';\r\nimport { CollectionFlashcardService } from '../CollectionFlashcard/collectionFlashcards.service';\r\nimport { FlashcardService } from '../Flashcards/flashcards.service';\r\nimport { forkJoin } from 'rxjs';\r\n\r\n@Component({\r\n  selector: \"app-collections-collectionform\",\r\n  templateUrl: \"./collectionform.component.html\"\r\n})\r\n\r\nexport class CollectionformComponent {\r\n  collectionForm: FormGroup;\r\n  isEditMode: boolean = false;\r\n  collectionId: number = -1;\r\n  flashcards: IFlashcard[] = [];\r\n  originalCollection: ICollection[] = [];\r\n  collectionFlashcard: ICollectionFlashcard[] = [];\r\n\r\n  dropdownOptions: IFlashcard[] = this.flashcards;\r\n  selectionGroup: FormGroup;\r\n  selectedFlashcards: IFlashcard[] = [];\r\n\r\n  \r\n\r\n  constructor(\r\n    private _collectionService: CollectionService,\r\n    private _flashcardService: FlashcardService,\r\n    private _collectionFlashcardService: CollectionFlashcardService,\r\n    private _formbuilder: FormBuilder,\r\n    private _router: Router,\r\n    private _route: ActivatedRoute\r\n  ) {\r\n    this.selectionGroup = _formbuilder.group({selectedFlashcards: ['']})\r\n    this.collectionForm = _formbuilder.group({\r\n      collectionId: [''],\r\n      collectionDate: new Date().getDate() + \".\" + (new Date().getMonth() + 1) + \".\" + new Date().getFullYear(),\r\n      collectionName: [''],\r\n      collectionFlashcard: [''],\r\n      totalFlashcards: [''],\r\n      contributerId: [''],\r\n      contributers: [''],\r\n    });\r\n\r\n\r\n\r\n    // Automatic data insertion\r\n    forkJoin([\r\n      this._flashcardService.getFlashcards(),\r\n    ]).subscribe(\r\n      ([flashcards]) => {\r\n        this.flashcards = flashcards;\r\n        console.log(\"Retrieved flashcards: \", flashcards)\r\n        this.collectionForm.patchValue({\r\n          /*collectionDate: new Date().getDate() + \".\" + (new Date().getMonth() + 1) + \".\" + new Date().getFullYear(),*/\r\n          flashcards: [],\r\n        });\r\n      },\r\n      (error) => {\r\n        console.error('Error fetching data:', error);\r\n      }\r\n    );\r\n  }\r\n\r\n  onSubmit() {\r\n    console.log(\"Selected Flashcard: \", this.selectedFlashcards)\r\n    for (let i of this.collectionFlashcard) {\r\n      this._collectionFlashcardService.addCollectionFlashcard(i)\r\n      console.log(\"Created collectionflashcard\", i)\r\n    }\r\n\r\n\r\n    const newCollection = this.collectionForm.value;\r\n    console.log(\"newCollection: \", newCollection)\r\n\r\n    if (this.isEditMode) {\r\n      console.log(\"sending collection: \", newCollection)\r\n      this._collectionService.updateCollection(this.collectionId, newCollection)\r\n        .subscribe(response => this.handleResponse(response));\r\n    } else {\r\n      this._collectionService.createCollection(newCollection)\r\n        .subscribe(response => this.handleResponse(response));\r\n    }\r\n  }\r\n\r\n  private handleResponse(response: any) {\r\n    if (response.success) {\r\n      console.log(response.message);\r\n      this._router.navigate(['/collections']);\r\n    } else {\r\n      console.log('Collection operation failed');\r\n    }\r\n  }\r\n\r\n  backToCollections() {\r\n    this._router.navigate(['/collections']);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this._route.params.subscribe(params => {\r\n      if (params['mode'] === 'create') {\r\n        this.isEditMode = false; // Create mode\r\n      } else if (params['mode'] === 'edit') {\r\n        this.isEditMode = true; // Edit mode\r\n        this.collectionId = +params['id']; // Convert to number\r\n        this.loadCollectionForEdit(this.collectionId);\r\n      }\r\n    });\r\n  }\r\n\r\n  loadCollectionForEdit(collectionId: number) {\r\n    this._collectionService.getCollectionById(collectionId)\r\n      .subscribe(\r\n        (collection: any) => {\r\n          this.originalCollection = collection;\r\n          console.log('retrieved collection: ', collection)\r\n          this.collectionForm.patchValue({\r\n            collectionName: collection.collectionName,\r\n            collectionFlashcard: collection.collectionFlashcard, \r\n            collectionDate: collection.collectionDate,\r\n            totalFlashcards: collection.totalFlashcards,\r\n            contributerId: collection.contributerId,\r\n            contributers: collection.contributers,\r\n          });\r\n        },\r\n        (error: any) => {\r\n          console.error('Error loading collection for edit:', error);\r\n        }\r\n      );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}