{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from \"@angular/core\";\nimport { Validators } from \"@angular/forms\";\nimport { forkJoin } from 'rxjs';\nlet CollectionformComponent = class CollectionformComponent {\n  constructor(_collectionService, _flashcardService, _formbuilder, _router, _route) {\n    this._collectionService = _collectionService;\n    this._flashcardService = _flashcardService;\n    this._formbuilder = _formbuilder;\n    this._router = _router;\n    this._route = _route;\n    this.isEditMode = false;\n    this.collectionId = -1;\n    this.flashcards = [];\n    this.existingFlashcards = [];\n    this.collectionForm = _formbuilder.group({\n      collectionName: ['', Validators.required],\n      flashcards: [[]]\n    });\n    // Automatic data insertion\n    forkJoin([this._flashcardService.getFlashcards()]).subscribe(([flashcards]) => {\n      this.flashcards = flashcards;\n      this.collectionForm.patchValue({\n        collectionDate: new Date().getDate() + \".\" + (new Date().getMonth() + 1) + \".\" + new Date().getFullYear(),\n        flashcards: []\n      });\n    }, error => {\n      console.error('Error fetching data:', error);\n    });\n  }\n  addFlashcard(value) {\n    console.log(\"Value:\", value.name);\n    this.existingFlashcards.push(this.flashcards[value.flashcardId - 1]);\n    var index = this.existingFlashcards.length - 1;\n    console.log(\"last index available: \", index, \"in an array of:\", this.existingFlashcards.length);\n    console.log(\"The array: \", this.existingFlashcards);\n    console.log(\"selected flashcard. \", this.existingFlashcards[index].name);\n    if (!this.isEditMode) {\n      this.flashcards = this.existingFlashcards;\n    } else {\n      for (let existingFlashcard of this.existingFlashcards) {\n        for (let flashcard of this.flashcards) {\n          if (existingFlashcard.flashcardId == flashcard.flashcardId) {\n            console.log(\"Removing: \", existingFlashcard);\n            this.existingFlashcards.splice(this.existingFlashcards.indexOf(existingFlashcard));\n          }\n        }\n      }\n    }\n  }\n  onSubmit() {\n    console.log(\"CollectionCreate form submitted:\");\n    console.log(\"The collection \" + this.collectionForm.value.collectionName + \" is created.\");\n    console.log(\"Touched? \" + this.collectionForm.touched);\n    console.log(\"Selected\", this.collectionForm.value.flashcards);\n    console.log(\"Selected\", this.collectionForm.value);\n    const newCollection = this.collectionForm.value;\n    if (this.isEditMode) {\n      this._collectionService.updateCollection(this.collectionId, newCollection).subscribe(response => this.handleResponse(response));\n    } else {\n      this._collectionService.createCollection(newCollection).subscribe(response => this.handleResponse(response));\n    }\n  }\n  handleResponse(response) {\n    if (response.success) {\n      console.log(response.message);\n      this._router.navigate(['/collections']);\n    } else {\n      console.log('Collection operation failed');\n    }\n  }\n  backToCollections() {\n    this._router.navigate(['/collections']);\n  }\n  ngOnInit() {\n    this._route.params.subscribe(params => {\n      if (params['mode'] === 'create') {\n        this.isEditMode = false; // Create mode\n      } else if (params['mode'] === 'edit') {\n        this.isEditMode = true; // Edit mode\n        this.collectionId = +params['id']; // Convert to number\n        this.loadCollectionForEdit(this.collectionId);\n      }\n    });\n  }\n  loadCollectionForEdit(collectionId) {\n    this._collectionService.getCollectionById(collectionId).subscribe(collection => {\n      console.log('retrieved collection: ', collection);\n      this.collectionForm.patchValue({\n        collectionName: collection.collectionName,\n        flashcards: collection.flashcards // Assuming 'flashcards' is the property name in your collection model\n      });\n    }, error => {\n      console.error('Error loading collection for edit:', error);\n    });\n  }\n};\nCollectionformComponent = __decorate([Component({\n  selector: \"app-collections-collectionform\",\n  templateUrl: \"./collectionform.component.html\"\n})], CollectionformComponent);\nexport { CollectionformComponent };","map":{"version":3,"mappings":"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","names":["Component","Validators","forkJoin","CollectionformComponent","constructor","_collectionService","_flashcardService","_formbuilder","_router","_route","collectionForm","group","collectionName","required","flashcards","getFlashcards","subscribe","patchValue","collectionDate","Date","getDate","getMonth","getFullYear","error","console","addFlashcard","value","log","name","existingFlashcards","push","flashcardId","index","length","isEditMode","existingFlashcard","flashcard","splice","indexOf","onSubmit","touched","newCollection","updateCollection","collectionId","response","handleResponse","createCollection","success","message","navigate","backToCollections","ngOnInit","params","loadCollectionForEdit","getCollectionById","collection","selector","templateUrl"],"sourceRoot":"","sources":["C:\\Users\\fmnil\\source\\repos\\WebApp2\\WebApp2\\ClientApp\\src\\app\\Collections\\collectionform.component.ts"],"sourcesContent":["import { Component } from \"@angular/core\";\r\nimport { FormGroup, FormBuilder, Validators } from \"@angular/forms\";\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { CollectionService } from './collections.service';\r\nimport { IFlashcard } from '../Flashcards/flashcard';\r\nimport { FlashcardService } from '../Flashcards/flashcards.service';\r\nimport { forkJoin } from 'rxjs';\r\n\r\n@Component({\r\n  selector: \"app-collections-collectionform\",\r\n  templateUrl: \"./collectionform.component.html\"\r\n})\r\n\r\nexport class CollectionformComponent {\r\n  collectionForm: FormGroup;\r\n  isEditMode: boolean = false;\r\n  collectionId: number = -1;\r\n  flashcards: IFlashcard[] = [];\r\n  existingFlashcards: IFlashcard[] = [];\r\n\r\n  constructor(\r\n    private _collectionService: CollectionService,\r\n    private _flashcardService: FlashcardService,\r\n    private _formbuilder: FormBuilder,\r\n    private _router: Router,\r\n    private _route: ActivatedRoute\r\n  ) {\r\n    this.collectionForm = _formbuilder.group({\r\n      collectionName: ['', Validators.required],\r\n      flashcards: [[]],\r\n    });\r\n\r\n    // Automatic data insertion\r\n    forkJoin([\r\n      this._flashcardService.getFlashcards(),\r\n    ]).subscribe(\r\n      ([flashcards]) => {\r\n        this.flashcards = flashcards;\r\n        this.collectionForm.patchValue({\r\n          collectionDate: new Date().getDate() + \".\" + (new Date().getMonth() + 1) + \".\" + new Date().getFullYear(),\r\n          flashcards: [],\r\n        });\r\n      },\r\n      (error) => {\r\n        console.error('Error fetching data:', error);\r\n      }\r\n    );\r\n  }\r\n\r\n  addFlashcard(value: IFlashcard): void {\r\n    console.log(\"Value:\", value.name)\r\n\r\n    this.existingFlashcards.push(this.flashcards[value.flashcardId - 1]);\r\n    var index = this.existingFlashcards.length -1\r\n    console.log(\"last index available: \", index, \"in an array of:\", this.existingFlashcards.length)\r\n    console.log(\"The array: \", this.existingFlashcards)\r\n    console.log(\"selected flashcard. \", this.existingFlashcards[index].name)\r\n\r\n    if (!this.isEditMode) {\r\n      this.flashcards = this.existingFlashcards\r\n    }\r\n    else {\r\n      for (let existingFlashcard of this.existingFlashcards) {\r\n        for (let flashcard of this.flashcards) {\r\n          if (existingFlashcard.flashcardId == flashcard.flashcardId) {\r\n            console.log(\"Removing: \", existingFlashcard)\r\n            this.existingFlashcards.splice(this.existingFlashcards.indexOf(existingFlashcard))\r\n            \r\n          }\r\n        }\r\n        \r\n      }\r\n    }\r\n  }\r\n\r\n  onSubmit() {\r\n    console.log(\"CollectionCreate form submitted:\");\r\n    console.log(\"The collection \" + this.collectionForm.value.collectionName + \" is created.\");\r\n    console.log(\"Touched? \" + this.collectionForm.touched);\r\n    console.log(\"Selected\", this.collectionForm.value.flashcards);\r\n    console.log(\"Selected\", this.collectionForm.value);\r\n\r\n    const newCollection = this.collectionForm.value;\r\n\r\n    if (this.isEditMode) {\r\n      this._collectionService.updateCollection(this.collectionId, newCollection)\r\n        .subscribe(response => this.handleResponse(response));\r\n    } else {\r\n      this._collectionService.createCollection(newCollection)\r\n        .subscribe(response => this.handleResponse(response));\r\n    }\r\n  }\r\n\r\n  private handleResponse(response: any) {\r\n    if (response.success) {\r\n      console.log(response.message);\r\n      this._router.navigate(['/collections']);\r\n    } else {\r\n      console.log('Collection operation failed');\r\n    }\r\n  }\r\n\r\n  backToCollections() {\r\n    this._router.navigate(['/collections']);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this._route.params.subscribe(params => {\r\n      if (params['mode'] === 'create') {\r\n        this.isEditMode = false; // Create mode\r\n      } else if (params['mode'] === 'edit') {\r\n        this.isEditMode = true; // Edit mode\r\n        this.collectionId = +params['id']; // Convert to number\r\n        this.loadCollectionForEdit(this.collectionId);\r\n      }\r\n    });\r\n  }\r\n\r\n  loadCollectionForEdit(collectionId: number) {\r\n    this._collectionService.getCollectionById(collectionId)\r\n      .subscribe(\r\n        (collection: any) => {\r\n          console.log('retrieved collection: ', collection);\r\n          this.collectionForm.patchValue({\r\n            collectionName: collection.collectionName,\r\n            flashcards: collection.flashcards, // Assuming 'flashcards' is the property name in your collection model\r\n          });\r\n        },\r\n        (error: any) => {\r\n          console.error('Error loading collection for edit:', error);\r\n        }\r\n      );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}