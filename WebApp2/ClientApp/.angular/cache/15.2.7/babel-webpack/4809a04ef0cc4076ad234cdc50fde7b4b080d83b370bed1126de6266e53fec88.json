{"ast":null,"code":"import { Validators } from \"@angular/forms\";\nimport { forkJoin } from 'rxjs';\n// for dropdown\nimport { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./collections.service\";\nimport * as i2 from \"../Flashcards/flashcards.service\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"@angular/common\";\nfunction CollectionformComponent_span_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"Select\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CollectionformComponent_span_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r1.checkedFlashcards.join(\", \"));\n  }\n}\nfunction CollectionformComponent_label_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\");\n    i0.ɵɵelement(1, \"input\", 12);\n    i0.ɵɵelementStart(2, \"span\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const a_r3 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(a_r3.name);\n  }\n}\nexport class CollectionformComponent {\n  constructor(_collectionService, _flashcardService, _formbuilder, _router, _route) {\n    this._collectionService = _collectionService;\n    this._flashcardService = _flashcardService;\n    this._formbuilder = _formbuilder;\n    this._router = _router;\n    this._route = _route;\n    this.isEditMode = false;\n    this.collectionId = -1;\n    this.flashcards = [];\n    //dropdown functionality\n    this.checkedFlashcards = [];\n    this.currentSelected = {};\n    this.sharedCheckedList = new EventEmitter();\n    this.shareIndividualCheckedList = new EventEmitter();\n    this.collectionForm = _formbuilder.group({\n      collectionName: ['', Validators.required],\n      flashcards: [[]]\n    });\n    //dropdown functionality\n    this.checkedFlashcards = [];\n    this.sharedCheckedList;\n    currentSelected: {}\n    ;\n    // Automatic data insertion\n    forkJoin([this._flashcardService.getFlashcards()]).subscribe(([flashcards]) => {\n      this.flashcards = flashcards;\n      this.collectionForm.patchValue({\n        collectionDate: new Date().getDate() + \".\" + (new Date().getMonth() + 1) + \".\" + new Date().getFullYear(),\n        flashcards: []\n      });\n    }, error => {\n      console.error('Error fetching data:', error);\n    });\n  }\n  getSelectedValue(status, value) {\n    if (status) {\n      this.checkedFlashcards.push(value);\n    } else {\n      var index = this.checkedFlashcards.indexOf(value);\n      this.checkedFlashcards.splice(index, 1);\n    }\n    this.currentSelected = {\n      checked: status,\n      name: value\n    };\n    //share checked list\n    this.shareCheckedlist();\n    //share individual selected item\n    this.shareIndividualStatus();\n  }\n  shareCheckedlist() {\n    this.sharedCheckedList.emit(this.checkedFlashcards);\n  }\n  shareIndividualStatus() {\n    this.shareIndividualCheckedList.emit(this.currentSelected);\n  }\n  //Rest of functionality\n  onSubmit() {\n    console.log(\"CollectionCreate form submitted:\");\n    console.log(\"The collection \" + this.collectionForm.value.collectionName + \" is created.\");\n    console.log(\"Touched? \" + this.collectionForm.touched);\n    console.log(\"Selected\", this.collectionForm.value.flashcards);\n    const newCollection = this.collectionForm.value;\n    if (this.isEditMode) {\n      this._collectionService.updateCollection(this.collectionId, newCollection).subscribe(response => this.handleResponse(response));\n    } else {\n      this._collectionService.createCollection(newCollection).subscribe(response => this.handleResponse(response));\n    }\n  }\n  handleResponse(response) {\n    if (response.success) {\n      console.log(response.message);\n      this._router.navigate(['/collections']);\n    } else {\n      console.log('Collection operation failed');\n    }\n  }\n  backToCollections() {\n    this._router.navigate(['/collections']);\n  }\n  ngOnInit() {\n    this._route.params.subscribe(params => {\n      if (params['mode'] === 'create') {\n        this.isEditMode = false; // Create mode\n      } else if (params['mode'] === 'edit') {\n        this.isEditMode = true; // Edit mode\n        this.collectionId = +params['id']; // Convert to number\n        this.loadCollectionForEdit(this.collectionId);\n      }\n    });\n  }\n  loadCollectionForEdit(collectionId) {\n    this._collectionService.getCollectionById(collectionId).subscribe(collection => {\n      console.log('retrieved collection: ', collection);\n      this.collectionForm.patchValue({\n        collectionName: collection.collectionName,\n        flashcards: collection.flashcards // Assuming 'flashcards' is the property name in your collection model\n      });\n    }, error => {\n      console.error('Error loading collection for edit:', error);\n    });\n  }\n}\nCollectionformComponent.ɵfac = function CollectionformComponent_Factory(t) {\n  return new (t || CollectionformComponent)(i0.ɵɵdirectiveInject(i1.CollectionService), i0.ɵɵdirectiveInject(i2.FlashcardService), i0.ɵɵdirectiveInject(i3.FormBuilder), i0.ɵɵdirectiveInject(i4.Router), i0.ɵɵdirectiveInject(i4.ActivatedRoute));\n};\nCollectionformComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: CollectionformComponent,\n  selectors: [[\"app-collections-collectionform\"]],\n  outputs: {\n    sharedCheckedList: \"sharedCheckedList\",\n    shareIndividualCheckedList: \"shareIndividualCheckedList\"\n  },\n  decls: 22,\n  vars: 7,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"collectionName\"], [\"type\", \"text\", \"id\", \"collectionName\", \"formControlName\", \"collectionName\", 1, \"form-control\"], [\"for\", \"collectionFlashcard\"], [1, \"drop-toggle\", \"btn\", \"flat\"], [4, \"ngIf\"], [1, \"fa\", \"fa-angle-down\"], [1, \"drop-show\"], [4, \"ngFor\", \"ngForOf\"], [\"type\", \"submit\", 1, \"btn-primary\", \"btn\", 3, \"disabled\"], [1, \"btn\", \"btn-secondary\", 3, \"click\"], [\"type\", \"checkbox\"]],\n  template: function CollectionformComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h2\");\n      i0.ɵɵtext(1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function CollectionformComponent_Template_form_ngSubmit_2_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(3, \"div\", 1)(4, \"label\", 2);\n      i0.ɵɵtext(5, \"Name:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(6, \"input\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"div\", 1)(8, \"label\", 4);\n      i0.ɵɵtext(9, \"Add flashcards:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(10, \"br\");\n      i0.ɵɵelementStart(11, \"button\", 5);\n      i0.ɵɵtemplate(12, CollectionformComponent_span_12_Template, 2, 0, \"span\", 6);\n      i0.ɵɵtemplate(13, CollectionformComponent_span_13_Template, 2, 1, \"span\", 6);\n      i0.ɵɵelement(14, \"i\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"div\", 8);\n      i0.ɵɵtemplate(16, CollectionformComponent_label_16_Template, 4, 1, \"label\", 9);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtext(17, \" ri \");\n      i0.ɵɵelementStart(18, \"button\", 10);\n      i0.ɵɵtext(19);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(20, \"button\", 11);\n      i0.ɵɵlistener(\"click\", function CollectionformComponent_Template_button_click_20_listener() {\n        return ctx.backToCollections();\n      });\n      i0.ɵɵtext(21, \"Cancel\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate1(\"\", ctx.isEditMode ? \"Update\" : \"Create\", \" Collection\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formGroup\", ctx.collectionForm);\n      i0.ɵɵadvance(10);\n      i0.ɵɵproperty(\"ngIf\", ctx.checkedFlashcards.length <= 0);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.checkedFlashcards.length > 0);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngForOf\", ctx.flashcards);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"disabled\", ctx.collectionForm.invalid);\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate1(\"\", ctx.isEditMode ? \"Update\" : \"Create\", \" Collection\");\n    }\n  },\n  dependencies: [i5.NgForOf, i5.NgIf, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"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","names":["Validators","forkJoin","EventEmitter","i0","CollectionformComponent","constructor","_collectionService","_flashcardService","_formbuilder","_router","_route","collectionForm","group","collectionName","required","flashcards","checkedFlashcards","sharedCheckedList","currentSelected","getFlashcards","subscribe","patchValue","collectionDate","Date","getDate","getMonth","getFullYear","error","console","getSelectedValue","status","value","push","index","indexOf","splice","checked","name","shareCheckedlist","shareIndividualStatus","emit","shareIndividualCheckedList","onSubmit","log","touched","newCollection","isEditMode","updateCollection","collectionId","response","handleResponse","createCollection","success","message","navigate","backToCollections","ngOnInit","params","loadCollectionForEdit","getCollectionById","collection","selectors","outputs","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\fmnil\\source\\repos\\WebApp2\\WebApp2\\ClientApp\\src\\app\\Collections\\collectionform.component.ts","C:\\Users\\fmnil\\source\\repos\\WebApp2\\WebApp2\\ClientApp\\src\\app\\Collections\\collectionform.component.html"],"sourcesContent":["import { Component } from \"@angular/core\";\r\nimport { FormGroup, FormBuilder, Validators } from \"@angular/forms\";\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { CollectionService } from './collections.service';\r\nimport { IFlashcard } from '../Flashcards/flashcard';\r\nimport { FlashcardService } from '../Flashcards/flashcards.service';\r\nimport { forkJoin } from 'rxjs';\r\n// for dropdown\r\nimport { Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: \"app-collections-collectionform\",\r\n  templateUrl: \"./collectionform.component.html\"\r\n})\r\n\r\nexport class CollectionformComponent {\r\n  collectionForm: FormGroup;\r\n  isEditMode: boolean = false;\r\n  collectionId: number = -1;\r\n  flashcards: IFlashcard[] = [];\r\n\r\n  //dropdown functionality\r\n  checkedFlashcards: any[] = [];\r\n  currentSelected: any = {}\r\n\r\n  @Output() sharedCheckedList = new EventEmitter();\r\n  @Output() shareIndividualCheckedList = new EventEmitter();\r\n\r\n  constructor(\r\n    private _collectionService: CollectionService,\r\n    private _flashcardService: FlashcardService,\r\n    private _formbuilder: FormBuilder,\r\n    private _router: Router,\r\n    private _route: ActivatedRoute\r\n  ) {\r\n    this.collectionForm = _formbuilder.group({\r\n      collectionName: ['', Validators.required],\r\n      flashcards: [[]],\r\n    });\r\n\r\n    //dropdown functionality\r\n    this.checkedFlashcards = [];\r\n    this.sharedCheckedList;\r\n    currentSelected: {};\r\n\r\n\r\n    // Automatic data insertion\r\n    forkJoin([\r\n      this._flashcardService.getFlashcards(),\r\n    ]).subscribe(\r\n      ([flashcards]) => {\r\n        this.flashcards = flashcards;\r\n        this.collectionForm.patchValue({\r\n          collectionDate: new Date().getDate() + \".\" + (new Date().getMonth() + 1) + \".\" + new Date().getFullYear(),\r\n          flashcards: [],\r\n        });\r\n      },\r\n      (error) => {\r\n        console.error('Error fetching data:', error);\r\n      }\r\n    );\r\n  }\r\n\r\n  getSelectedValue(status: Boolean, value: String) {\r\n    if (status) {\r\n      this.checkedFlashcards.push(value);\r\n    } else {\r\n      var index = this.checkedFlashcards.indexOf(value);\r\n      this.checkedFlashcards.splice(index, 1);\r\n    }\r\n\r\n    this.currentSelected = { checked: status, name: value };\r\n\r\n    //share checked list\r\n    this.shareCheckedlist();\r\n\r\n    //share individual selected item\r\n    this.shareIndividualStatus();\r\n  }\r\n  shareCheckedlist() {\r\n    this.sharedCheckedList.emit(this.checkedFlashcards);\r\n  }\r\n  shareIndividualStatus() {\r\n    this.shareIndividualCheckedList.emit(this.currentSelected);\r\n  }\r\n\r\n\r\n  //Rest of functionality\r\n  onSubmit() {\r\n    console.log(\"CollectionCreate form submitted:\");\r\n    console.log(\"The collection \" + this.collectionForm.value.collectionName + \" is created.\");\r\n    console.log(\"Touched? \" + this.collectionForm.touched);\r\n    console.log(\"Selected\", this.collectionForm.value.flashcards);\r\n\r\n    const newCollection = this.collectionForm.value;\r\n\r\n    if (this.isEditMode) {\r\n      this._collectionService.updateCollection(this.collectionId, newCollection)\r\n        .subscribe(response => this.handleResponse(response));\r\n    } else {\r\n      this._collectionService.createCollection(newCollection)\r\n        .subscribe(response => this.handleResponse(response));\r\n    }\r\n  }\r\n\r\n  private handleResponse(response: any) {\r\n    if (response.success) {\r\n      console.log(response.message);\r\n      this._router.navigate(['/collections']);\r\n    } else {\r\n      console.log('Collection operation failed');\r\n    }\r\n  }\r\n\r\n  backToCollections() {\r\n    this._router.navigate(['/collections']);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this._route.params.subscribe(params => {\r\n      if (params['mode'] === 'create') {\r\n        this.isEditMode = false; // Create mode\r\n      } else if (params['mode'] === 'edit') {\r\n        this.isEditMode = true; // Edit mode\r\n        this.collectionId = +params['id']; // Convert to number\r\n        this.loadCollectionForEdit(this.collectionId);\r\n      }\r\n    });\r\n  }\r\n\r\n  loadCollectionForEdit(collectionId: number) {\r\n    this._collectionService.getCollectionById(collectionId)\r\n      .subscribe(\r\n        (collection: any) => {\r\n          console.log('retrieved collection: ', collection);\r\n          this.collectionForm.patchValue({\r\n            collectionName: collection.collectionName,\r\n            flashcards: collection.flashcards, // Assuming 'flashcards' is the property name in your collection model\r\n          });\r\n        },\r\n        (error: any) => {\r\n          console.error('Error loading collection for edit:', error);\r\n        }\r\n      );\r\n  }\r\n}\r\n","<h2>{{isEditMode ? 'Update' : 'Create'}} Collection</h2>\r\n\r\n<form [formGroup]=\"collectionForm\" (ngSubmit)=\"onSubmit()\">\r\n  <div class=\"form-group\">\r\n    <label for=\"collectionName\">Name:</label>\r\n    <input type=\"text\" id=\"collectionName\" formControlName=\"collectionName\" class=\"form-control\" />\r\n  </div>\r\n  <div class=\"form-group\">\r\n    <label for=\"collectionFlashcard\">Add flashcards:</label>\r\n    <br />\r\n\r\n\r\n      <button class=\"drop-toggle btn flat\" >\r\n        <span *ngIf=\"checkedFlashcards.length<=0\">Select</span>\r\n        <span *ngIf=\"checkedFlashcards.length>0\">{{checkedFlashcards.join(', ')}}</span>\r\n        <i class=\"fa fa-angle-down\"></i>\r\n      </button>\r\n      <div class=\"drop-show\">\r\n        <label *ngFor=\"let a of flashcards\">\r\n          <input type=\"checkbox\" />\r\n          <span>{{a.name}}</span>\r\n        </label>\r\n      </div>\r\n\r\n\r\n      <!--<ul class=\"dropdown\">\r\n      <li *ngFor=\"let flashcard of flashcards\">\r\n        <label for=\"{{flashcard.flashcardId}}\">\r\n          <input selected type=\"checkbox\" id=\"{{flashcard.flashcardId}}\" name=\"{{flashcard.name}}\" /> {{flashcard.name}}\r\n        </label>\r\n      </li>\r\n    </ul>-->\r\n      <!--<input *ngIf=\"isEditMode == true\" id=\"dropdown1\" ej-dropdownlist type=\"checkbox\"/>-->\r\n      <!--<select multiple formControlName=\"flashcards\" style=\"width: 300px;\">\r\n      <option *ngFor=\"let flashcard of flashcards\" [ngValue]=\"flashcard\">{{flashcard.flashcardId}}. Term: {{flashcard.name}}, Definition: {{flashcard.description}}</option>\r\n    </select>-->\r\n    </div>\r\n\r\n    \n\r\n    ri\r\n\r\n    <button class=\"btn-primary btn\" type=\"submit\" [disabled]=\"collectionForm.invalid\">{{isEditMode ? 'Update' : 'Create'}} Collection</button>\r\n    <button class=\"btn btn-secondary\" (click)=\"backToCollections()\">Cancel</button>\r\n</form>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}