{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../Flashcards/flashcards.service\";\nimport * as i2 from \"./collectionFlashcards.service\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/router\";\nfunction CollectionFlashcardFormComponent_option_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"option\", 7);\n  }\n  if (rf & 2) {\n    const flashcard_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngValue\", flashcard_r1);\n  }\n}\n;\nexport class CollectionFlashcardFormComponent {\n  constructor(_flashcardService, _collectionFlashcardService, _formbuilder, _router, _route) {\n    this._flashcardService = _flashcardService;\n    this._collectionFlashcardService = _collectionFlashcardService;\n    this._formbuilder = _formbuilder;\n    this._router = _router;\n    this._route = _route;\n    this.flashcards = [];\n    this.collectionId = 0;\n    this.collectionFlashcardForm = _formbuilder.group({\n      flashcardId: [''],\n      collectionId: ['']\n    });\n    //  // Automatic data insertion\n    //  forkJoin([\n    //    this._flashcardService.getFlashcards(),\n    //  ]).subscribe(\n    //    ([flashcards]) => {\n    //      this.flashcards = flashcards;\n    //      console.log(\"Retrieved flashcards: \", flashcards)\n    //      this.collectionFlashcardForm.patchValue({\n    //        flashcards: [],\n    //      });\n    //    },\n    //    (error) => {\n    //      console.error('Error fetching data:', error);\n    //    }\n    //  );\n  }\n\n  onSubmit() {\n    console.log(\"Selected Flashcard: \", this.collectionFlashcardForm.value);\n    const newCollectionFlashcards = [];\n    for (let selectedFlashcard of this.collectionFlashcardForm.value.selectedFlashcards) {\n      const collectionFlashcard = {\n        flashcardId: selectedFlashcard.flashcardId,\n        collectionId: this.collectionId\n      };\n      newCollectionFlashcards.push(collectionFlashcard);\n      console.log(\"Created collectionFlashcard Real \", collectionFlashcard);\n    }\n    this._collectionFlashcardService.addCollectionFlashcard(newCollectionFlashcards);\n  }\n  handleResponse(response) {\n    if (response.success) {\n      console.log(response.message);\n      this._router.navigate(['/collections']);\n    } else {\n      console.log('Collection operation failed');\n    }\n  }\n  backToCollections() {\n    this._router.navigate(['/collectionsFlashcard']);\n  }\n  ngOnInit() {\n    this._route.params.subscribe(params => {\n      this.collectionId = +params['id']; // Convert to number\n      this.loadCollectionFlashcardsByCollectionId(this.collectionId);\n    });\n  }\n  loadCollectionFlashcardsByCollectionId(collectionId) {\n    this._collectionFlashcardService.getCollectionFlashcardByCollectionId(collectionId).subscribe(collectionFlashcard => {\n      console.log('retrieved collectionFlashcard: ', collectionFlashcard);\n      this.collectionFlashcardForm.patchValue({\n        flashcardId: collectionFlashcard.flashcardId,\n        collectionId: collectionFlashcard.collectionId\n      });\n    }, error => {\n      console.error('Error loading collection for edit:', error);\n    });\n  }\n}\nCollectionFlashcardFormComponent.ɵfac = function CollectionFlashcardFormComponent_Factory(t) {\n  return new (t || CollectionFlashcardFormComponent)(i0.ɵɵdirectiveInject(i1.FlashcardService), i0.ɵɵdirectiveInject(i2.CollectionFlashcardService), i0.ɵɵdirectiveInject(i3.FormBuilder), i0.ɵɵdirectiveInject(i4.Router), i0.ɵɵdirectiveInject(i4.ActivatedRoute));\n};\nCollectionFlashcardFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: CollectionFlashcardFormComponent,\n  selectors: [[\"app-collections-collectionform\"]],\n  decls: 13,\n  vars: 3,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"collectionFlashcard\"], [\"multiple\", \"\", \"formControlName\", \"selectedFlashcardForm\", 2, \"width\", \"300px\"], [3, \"ngValue\", 4, \"ngFor\", \"ngForOf\"], [\"type\", \"submit\", 1, \"btn-primary\", \"btn\", 3, \"disabled\"], [1, \"btn\", \"btn-secondary\", 3, \"click\"], [3, \"ngValue\"]],\n  template: function CollectionFlashcardFormComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h2\");\n      i0.ɵɵtext(1, \"Add Flashcard to Collection\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function CollectionFlashcardFormComponent_Template_form_ngSubmit_2_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(3, \"div\", 1)(4, \"label\", 2);\n      i0.ɵɵtext(5, \"Add flashcards:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(6, \"br\");\n      i0.ɵɵelementStart(7, \"select\", 3);\n      i0.ɵɵtemplate(8, CollectionFlashcardFormComponent_option_8_Template, 1, 1, \"option\", 4);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(9, \"button\", 5);\n      i0.ɵɵtext(10, \"Add Flashcard to Collection\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"button\", 6);\n      i0.ɵɵlistener(\"click\", function CollectionFlashcardFormComponent_Template_button_click_11_listener() {\n        return ctx.backToCollections();\n      });\n      i0.ɵɵtext(12, \"Cancel\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      let tmp_1_0;\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"formGroup\", ctx.collectionFlashcardForm);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngForOf\", (tmp_1_0 = ctx.collectionFlashcardForm.get(\"selectedFlashcardForm\")) == null ? null : tmp_1_0.value);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"disabled\", ctx.collectionFlashcardForm.invalid);\n    }\n  },\n  encapsulation: 2\n});","map":{"version":3,"mappings":"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","names":["i0","CollectionFlashcardFormComponent","constructor","_flashcardService","_collectionFlashcardService","_formbuilder","_router","_route","collectionFlashcardForm","group","flashcardId","collectionId","onSubmit","console","log","value","newCollectionFlashcards","selectedFlashcard","selectedFlashcards","collectionFlashcard","push","addCollectionFlashcard","handleResponse","response","success","message","navigate","backToCollections","ngOnInit","params","subscribe","loadCollectionFlashcardsByCollectionId","getCollectionFlashcardByCollectionId","patchValue","error","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\William\\Source\\Repos\\WebApp2\\WebApp2\\ClientApp\\src\\app\\CollectionFlashcard\\collectionFlashcardForm.component.html","C:\\Users\\William\\Source\\Repos\\WebApp2\\WebApp2\\ClientApp\\src\\app\\CollectionFlashcard\\collectionFlashcardform.component.ts"],"sourcesContent":["<h2>Add Flashcard to Collection</h2>\r\n\r\n<form [formGroup]=\"collectionFlashcardForm\" (ngSubmit)=\"onSubmit()\">\r\n\r\n  <div class=\"form-group\">\r\n    <label for=\"collectionFlashcard\">Add flashcards:</label>\r\n    <br />\r\n    <select multiple formControlName=\"selectedFlashcardForm\" style=\"width: 300px;\">\r\n      <option *ngFor=\"let flashcard of collectionFlashcardForm.get('selectedFlashcardForm')?.value\" [ngValue]=\"flashcard\">\r\n</select>\r\n  </div>\r\n\r\n  <button class=\"btn-primary btn\" type=\"submit\" [disabled]=\"collectionFlashcardForm.invalid\">Add Flashcard to Collection</button>\r\n  <button class=\"btn btn-secondary\" (click)=\"backToCollections()\">Cancel</button>\r\n\r\n</form>\r\n","import { Component, OnInit } from \"@angular/core\";\r\nimport { FormGroup, FormBuilder, Validators } from \"@angular/forms\";\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { IFlashcard } from '../Flashcards/flashcard';;\r\nimport { ICollection } from '../Collections/collection';\r\nimport { ICollectionFlashcard } from './collectionFlashcard';\r\nimport { CollectionFlashcardService } from './collectionFlashcards.service';\r\nimport { FlashcardService } from '../Flashcards/flashcards.service';\r\nimport { forkJoin } from 'rxjs';\r\n\r\n@Component({\r\n  selector: \"app-collections-collectionform\",\r\n  templateUrl: \"./collectionFlashcardForm.component.html\"\r\n})\r\n\r\nexport class CollectionFlashcardFormComponent implements OnInit{\r\n  collectionFlashcardForm: FormGroup;\r\n  flashcards: IFlashcard[] = [];\r\n  collectionId: number = 0;\r\n\r\n  \r\n\r\n  constructor(\r\n    private _flashcardService: FlashcardService,\r\n    private _collectionFlashcardService: CollectionFlashcardService,\r\n    private _formbuilder: FormBuilder,\r\n    private _router: Router,\r\n    private _route: ActivatedRoute\r\n  ) {\r\n    this.collectionFlashcardForm = _formbuilder.group({\r\n      flashcardId: [''],\r\n      collectionId: [''],\r\n    })\r\n\r\n\r\n  //  // Automatic data insertion\r\n  //  forkJoin([\r\n  //    this._flashcardService.getFlashcards(),\r\n  //  ]).subscribe(\r\n  //    ([flashcards]) => {\r\n  //      this.flashcards = flashcards;\r\n  //      console.log(\"Retrieved flashcards: \", flashcards)\r\n  //      this.collectionFlashcardForm.patchValue({\r\n  //        flashcards: [],\r\n  //      });\r\n  //    },\r\n  //    (error) => {\r\n  //      console.error('Error fetching data:', error);\r\n  //    }\r\n  //  );\r\n  }\r\n\r\n  onSubmit() {\r\n    console.log(\"Selected Flashcard: \", this.collectionFlashcardForm.value);\r\n\r\n    const newCollectionFlashcards: ICollectionFlashcard[] = [];\r\n\r\n    for (let selectedFlashcard of this.collectionFlashcardForm.value.selectedFlashcards) {\r\n      const collectionFlashcard: ICollectionFlashcard = {\r\n        flashcardId: selectedFlashcard.flashcardId,\r\n        collectionId: this.collectionId\r\n      };\r\n\r\n      newCollectionFlashcards.push(collectionFlashcard);\r\n\r\n      console.log(\"Created collectionFlashcard Real \", collectionFlashcard);\r\n    }\r\n\r\n    this._collectionFlashcardService.addCollectionFlashcard(newCollectionFlashcards);\r\n  }\r\n\r\n  private handleResponse(response: any) {\r\n    if (response.success) {\r\n      console.log(response.message);\r\n      this._router.navigate(['/collections']);\r\n    } else {\r\n      console.log('Collection operation failed');\r\n    }\r\n  }\r\n\r\n  backToCollections() {\r\n    this._router.navigate(['/collectionsFlashcard']);\r\n  }\r\n\r\n\r\n  ngOnInit(): void {\r\n    this._route.params.subscribe(params => {\r\n        this.collectionId = +params['id']; // Convert to number\r\n        this.loadCollectionFlashcardsByCollectionId(this.collectionId);\r\n      })\r\n  }\r\n\r\n  loadCollectionFlashcardsByCollectionId(collectionId: number) {\r\n    this._collectionFlashcardService.getCollectionFlashcardByCollectionId(collectionId)\r\n      .subscribe(\r\n        (collectionFlashcard: any) => {\r\n          console.log('retrieved collectionFlashcard: ', collectionFlashcard)\r\n          this.collectionFlashcardForm.patchValue({\r\n            flashcardId: collectionFlashcard.flashcardId,\r\n            collectionId: collectionFlashcard.collectionId,\r\n          });\r\n        },\r\n        (error: any) => {\r\n          console.error('Error loading collection for edit:', error);\r\n        }\r\n      );\r\n  }\r\n\r\n\r\n\r\n\r\n  //All koden under her var innenfor og på bunnen av onSubmit\r\n\r\n  //this._collectionFlashcardService.getCollectionFlashcard().subscribe(\r\n  //  (collectionFlashcards) => {\r\n  //    this.collectionFlashcard = collectionFlashcards;\r\n  //    console.log(\"Retrieved collectionFlashcards after update: \", this.collectionFlashcard);\r\n  //  }\r\n  /*    );*/\r\n  //console.log(\"Selected Flashcard: \", this.collectionForm.value.selectedFlashcards)\r\n  //for (let i of this.collectionForm.value.selectedFlashcards) {\r\n  //  const collectionFlashcard: ICollectionFlashcard = { flashcardId: i.flashcardId, collectionId: this.collectionId }\r\n  //  this.collectionFlashcardForm.patchValue({\r\n  //    flashcardId: collectionFlashcard.flashcardId,\r\n  //    collectionId: this.collectionId,\r\n  //  })\r\n  //  this._collectionFlashcardService.addCollectionFlashcard(this.collectionFlashcardForm);\r\n  //  console.log(\"Created collectionFlashcard Real \", collectionFlashcard)\r\n  //}\r\n\r\n  //this._collectionFlashcardService.getCollectionFlashcard().subscribe(\r\n  //  (collectionFlashcard) => {\r\n  //    this.collectionFlashcard = collectionFlashcard;\r\n  //    console.log(\"Retrieved collectionFlashcards after update: \", this.collectionFlashcard)\r\n  //  }\r\n  //)\r\n\r\n\r\n  //const newCollection = this.collectionForm.value;\r\n  //console.log(\"newCollection: \", newCollection)\r\n\r\n  //if (this.isEditMode) {\r\n  //  console.log(\"sending collection: \", newCollection)\r\n  //  this._collectionService.updateCollection(this.collectionId, newCollection)\r\n  //    .subscribe(response => this.handleResponse(response));\r\n  //} else {\r\n  //  this._collectionService.createCollection(newCollection)\r\n  //    .subscribe(response => this.handleResponse(response));\r\n  //}\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}