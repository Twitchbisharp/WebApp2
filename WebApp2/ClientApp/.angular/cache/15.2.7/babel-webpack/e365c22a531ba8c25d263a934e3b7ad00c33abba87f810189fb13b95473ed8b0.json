{"ast":null,"code":"import { Validators } from \"@angular/forms\";\nimport { forkJoin } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./collections.service\";\nimport * as i2 from \"../Flashcards/flashcards.service\";\nimport * as i3 from \"../CollectionFlashcard/collectionFlashcards.service\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"@angular/router\";\nexport class CollectionformComponent {\n  constructor(_collectionService, _flashcardService, _collectionFlashcardService, _formbuilder, _router, _route) {\n    this._collectionService = _collectionService;\n    this._flashcardService = _flashcardService;\n    this._collectionFlashcardService = _collectionFlashcardService;\n    this._formbuilder = _formbuilder;\n    this._router = _router;\n    this._route = _route;\n    this.isEditMode = false;\n    this.collectionId = -1;\n    this.flashcards = [];\n    this.collectionflashcard = [];\n    this.collectionForm = _formbuilder.group({\n      collectionName: ['', Validators.required],\n      collectionDate: [''],\n      contributerId: [''],\n      flashcards: [[]],\n      totalFlashcards: ['']\n    });\n    // Automatic data insertion\n    forkJoin([this._flashcardService.getFlashcards()]).subscribe(([flashcards]) => {\n      this.flashcards = flashcards;\n      this.collectionForm.patchValue({\n        collectionDate: new Date().getDate() + \".\" + (new Date().getMonth() + 1) + \".\" + new Date().getFullYear(),\n        contributerId: 6,\n        flashcards: [],\n        totalFlashcards: flashcards.length\n      });\n    }, error => {\n      console.error('Error fetching data:', error);\n    });\n  }\n  onSubmit() {\n    console.log(\"CollectionCreate form submitted:\");\n    console.log(\"The collection \" + this.collectionForm.value.collectionName + \" is created.\");\n    console.log(\"Touched? \" + this.collectionForm.touched);\n    console.log(\"Selected\", this.collectionForm.value.flashcards);\n    console.log(\"CollectionForm Content\", this.collectionForm);\n    const newCollection = this.collectionForm.value;\n    // Update CollectionFlashcards based on the flashcards selected\n    const collectionId = this._collectionService.getNextCollectionId();\n    for (var flashcard of this.collectionForm.value.flashcards) {\n      this.collectionflashcard.fill({\n        collectionId: collectionId,\n        flashcardId: flashcard.flashcardId\n      });\n    }\n    console.log(\"Collectionflashcards: \", this.collectionflashcard);\n    if (this.isEditMode) {\n      this._collectionService.updateCollection(this.collectionId, newCollection).subscribe(response => this.handleResponse(response));\n    } else {\n      this._collectionService.createCollection(newCollection).subscribe(response => this.handleResponse(response));\n    }\n  }\n  handleResponse(response) {\n    if (response.success) {\n      console.log(response.message);\n      this._router.navigate(['/collections']);\n    } else {\n      console.log('Collection operation failed');\n    }\n  }\n  backToCollections() {\n    this._router.navigate(['/collections']);\n  }\n  ngOnInit() {\n    this._route.params.subscribe(params => {\n      if (params['mode'] === 'create') {\n        this.isEditMode = false; // Create mode\n      } else if (params['mode'] === 'edit') {\n        this.isEditMode = true; // Edit mode\n        this.collectionId = +params['id']; // Convert to number\n        this.loadCollectionForEdit(this.collectionId);\n      }\n    });\n  }\n  loadCollectionForEdit(collectionId) {\n    this._collectionService.getCollectionById(collectionId).subscribe(collection => {\n      console.log('retrieved collection: ', collection);\n      this.collectionForm.patchValue({\n        collectionName: collection.collectionName,\n        flashcards: collection.flashcards // Assuming 'flashcards' is the property name in your collection model\n      });\n    }, error => {\n      console.error('Error loading collection for edit:', error);\n    });\n  }\n}\nCollectionformComponent.ɵfac = function CollectionformComponent_Factory(t) {\n  return new (t || CollectionformComponent)(i0.ɵɵdirectiveInject(i1.CollectionService), i0.ɵɵdirectiveInject(i2.FlashcardService), i0.ɵɵdirectiveInject(i3.CollectionFlashcardService), i0.ɵɵdirectiveInject(i4.FormBuilder), i0.ɵɵdirectiveInject(i5.Router), i0.ɵɵdirectiveInject(i5.ActivatedRoute));\n};\nCollectionformComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: CollectionformComponent,\n  selectors: [[\"app-collections-collectionform\"]],\n  decls: 11,\n  vars: 4,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"collectionName\"], [\"type\", \"text\", \"id\", \"collectionName\", \"formControlName\", \"collectionName\", 1, \"form-control\"], [\"type\", \"submit\", 1, \"btn-primary\", \"btn\", 3, \"disabled\"], [1, \"btn\", \"btn-secondary\", 3, \"click\"]],\n  template: function CollectionformComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h2\");\n      i0.ɵɵtext(1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function CollectionformComponent_Template_form_ngSubmit_2_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(3, \"div\", 1)(4, \"label\", 2);\n      i0.ɵɵtext(5, \"Name:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(6, \"input\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"button\", 4);\n      i0.ɵɵtext(8);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"button\", 5);\n      i0.ɵɵlistener(\"click\", function CollectionformComponent_Template_button_click_9_listener() {\n        return ctx.backToCollections();\n      });\n      i0.ɵɵtext(10, \"Cancel\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate1(\"\", ctx.isEditMode ? \"Update\" : \"Create\", \" Collection\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formGroup\", ctx.collectionForm);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"disabled\", ctx.collectionForm.invalid);\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate1(\"\", ctx.isEditMode ? \"Update\" : \"Create\", \" Collection\");\n    }\n  },\n  dependencies: [i4.ɵNgNoValidate, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i4.FormGroupDirective, i4.FormControlName],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"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","names":["Validators","forkJoin","CollectionformComponent","constructor","_collectionService","_flashcardService","_collectionFlashcardService","_formbuilder","_router","_route","collectionForm","group","collectionName","required","collectionDate","contributerId","flashcards","totalFlashcards","getFlashcards","subscribe","patchValue","Date","getDate","getMonth","getFullYear","length","error","console","onSubmit","log","value","touched","newCollection","collectionId","getNextCollectionId","flashcard","collectionflashcard","fill","flashcardId","isEditMode","updateCollection","response","handleResponse","createCollection","success","message","navigate","backToCollections","ngOnInit","params","loadCollectionForEdit","getCollectionById","collection","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["C:\\Users\\fmnil\\source\\repos\\WebApp2\\WebApp2\\ClientApp\\src\\app\\Collections\\collectionform.component.ts","C:\\Users\\fmnil\\source\\repos\\WebApp2\\WebApp2\\ClientApp\\src\\app\\Collections\\collectionform.component.html"],"sourcesContent":["import { Component } from \"@angular/core\";\r\nimport { FormGroup, FormBuilder, Validators } from \"@angular/forms\";\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { CollectionService } from './collections.service';\r\nimport { CollectionFlashcardService } from '../CollectionFlashcard/collectionFlashcards.service';\r\nimport { IFlashcard } from '../Flashcards/flashcard';\r\nimport { FlashcardService } from '../Flashcards/flashcards.service';\r\nimport { forkJoin } from 'rxjs';\r\nimport { ICollectionFlashcard } from \"../CollectionFlashcard/collectionFlashcard\";\r\n\r\n@Component({\r\n  selector: \"app-collections-collectionform\",\r\n  templateUrl: \"./collectionform.component.html\"\r\n})\r\n\r\nexport class CollectionformComponent {\r\n  collectionForm: FormGroup;\r\n  isEditMode: boolean = false;\r\n  collectionId: number = -1;\r\n  flashcards: IFlashcard[] = [];\r\n  collectionflashcard: ICollectionFlashcard[] = [];\r\n\r\n  constructor(\r\n    private _collectionService: CollectionService,\r\n    private _flashcardService: FlashcardService,\r\n    private _collectionFlashcardService: CollectionFlashcardService,\r\n    private _formbuilder: FormBuilder,\r\n    private _router: Router,\r\n    private _route: ActivatedRoute\r\n  ) {\r\n    this.collectionForm = _formbuilder.group({\r\n      collectionName: ['', Validators.required],\r\n      collectionDate: [''],\r\n      contributerId: [''],\r\n      flashcards: [[]],\r\n      totalFlashcards: [''],\r\n    });\r\n\r\n    // Automatic data insertion\r\n    forkJoin([\r\n      this._flashcardService.getFlashcards(),\r\n    ]).subscribe(\r\n      ([flashcards]) => {\r\n        this.flashcards = flashcards;        \r\n        this.collectionForm.patchValue({\r\n          collectionDate: new Date().getDate() + \".\" + (new Date().getMonth() + 1) + \".\" + new Date().getFullYear(),\r\n          contributerId: 6,\r\n          flashcards: [],\r\n          totalFlashcards: flashcards.length\r\n        });\r\n      },\r\n      (error) => {\r\n        console.error('Error fetching data:', error);\r\n      }\r\n    );\r\n  }\r\n\r\n  onSubmit() {\r\n    console.log(\"CollectionCreate form submitted:\");\r\n    console.log(\"The collection \" + this.collectionForm.value.collectionName + \" is created.\");\r\n    console.log(\"Touched? \" + this.collectionForm.touched);\r\n    console.log(\"Selected\", this.collectionForm.value.flashcards);\r\n    console.log(\"CollectionForm Content\", this.collectionForm);\r\n\r\n    const newCollection = this.collectionForm.value;\r\n\r\n    // Update CollectionFlashcards based on the flashcards selected\r\n    const collectionId = this._collectionService.getNextCollectionId()\r\n    for (var flashcard of this.collectionForm.value.flashcards) {\r\n      this.collectionflashcard.fill({ collectionId: collectionId, flashcardId: flashcard.flashcardId }) \r\n    }\r\n    console.log(\"Collectionflashcards: \", this.collectionflashcard)\r\n\r\n    if (this.isEditMode) {\r\n      this._collectionService.updateCollection(this.collectionId, newCollection)\r\n        .subscribe(response => this.handleResponse(response));\r\n    } else {\r\n      this._collectionService.createCollection(newCollection)\r\n        .subscribe(response => this.handleResponse(response));\r\n    }\r\n  }\r\n\r\n  private handleResponse(response: any) {\r\n    if (response.success) {\r\n      console.log(response.message);\r\n      this._router.navigate(['/collections']);\r\n    } else {\r\n      console.log('Collection operation failed');\r\n    }\r\n  }\r\n\r\n  backToCollections() {\r\n    this._router.navigate(['/collections']);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this._route.params.subscribe(params => {\r\n      if (params['mode'] === 'create') {\r\n        this.isEditMode = false; // Create mode\r\n      } else if (params['mode'] === 'edit') {\r\n        this.isEditMode = true; // Edit mode\r\n        this.collectionId = +params['id']; // Convert to number\r\n        this.loadCollectionForEdit(this.collectionId);\r\n      }\r\n    });\r\n  }\r\n\r\n  loadCollectionForEdit(collectionId: number) {\r\n    this._collectionService.getCollectionById(collectionId)\r\n      .subscribe(\r\n        (collection: any) => {\r\n          console.log('retrieved collection: ', collection);\r\n          this.collectionForm.patchValue({\r\n            collectionName: collection.collectionName,\r\n            flashcards: collection.flashcards, // Assuming 'flashcards' is the property name in your collection model\r\n          });\r\n        },\r\n        (error: any) => {\r\n          console.error('Error loading collection for edit:', error);\r\n        }\r\n      );\r\n  }\r\n}\r\n","<h2>{{isEditMode ? 'Update' : 'Create'}} Collection</h2>\r\n\r\n<form [formGroup]=\"collectionForm\" (ngSubmit)=\"onSubmit()\">\r\n  <div class=\"form-group\">\r\n    <label for=\"collectionName\">Name:</label>\r\n    <input type=\"text\" id=\"collectionName\" formControlName=\"collectionName\" class=\"form-control\" />\r\n  </div>\r\n  <!--<div class=\"form-group\">\r\n    <label for=\"collectionFlashcard\">Add flashcards:</label>\r\n    <br />\r\n    <select multiple formControlName=\"flashcards\" style=\"width: 300px;\">\r\n      <option *ngFor=\"let flashcard of flashcards\" [ngValue]=\"flashcard\">{{flashcard.flashcardId}}. Term: {{flashcard.name}}, Definition: {{flashcard.description}}</option>\r\n    </select>\r\n  </div>-->\r\n\r\n  <button class=\"btn-primary btn\" type=\"submit\" [disabled]=\"collectionForm.invalid\">{{isEditMode ? 'Update' : 'Create'}} Collection</button>\r\n  <button class=\"btn btn-secondary\" (click)=\"backToCollections()\">Cancel</button>\r\n</form>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}