{"ast":null,"code":"import { forkJoin } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./collections.service\";\nimport * as i2 from \"../Flashcards/flashcards.service\";\nimport * as i3 from \"../CollectionFlashcard/collectionFlashcards.service\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"@angular/router\";\n;\nexport class CollectionformComponent {\n  constructor(_collectionService, _flashcardService, _collectionFlashcardService, _formbuilder, _router, _route) {\n    this._collectionService = _collectionService;\n    this._flashcardService = _flashcardService;\n    this._collectionFlashcardService = _collectionFlashcardService;\n    this._formbuilder = _formbuilder;\n    this._router = _router;\n    this._route = _route;\n    this.isEditMode = false;\n    this.collectionId = -1;\n    this.flashcards = [];\n    this.originalCollection = [];\n    this.collectionForm = _formbuilder.group({\n      collectionId: [''],\n      collectionDate: [''],\n      collectionName: [''],\n      collectionFlashcard: [''],\n      totalFlashcards: [''],\n      contributerId: [''],\n      contributers: ['']\n    });\n    // Automatic data insertion\n    forkJoin([this._flashcardService.getFlashcards()]).subscribe(([flashcards]) => {\n      this.flashcards = flashcards;\n      console.log(\"Retrieved flashcards: \", flashcards);\n      this.collectionForm.patchValue({\n        /*collectionDate: new Date().getDate() + \".\" + (new Date().getMonth() + 1) + \".\" + new Date().getFullYear(),*/\n        flashcards: []\n      });\n    }, error => {\n      console.error('Error fetching data:', error);\n    });\n  }\n  onSubmit() {\n    const newCollection = this.collectionForm.value;\n    console.log(\"newCollection: \", newCollection);\n    if (this.isEditMode) {\n      console.log(\"sending collection: \", newCollection);\n      this._collectionService.updateCollection(this.collectionId, newCollection).subscribe(response => this.handleResponse(response));\n    } else {\n      this._collectionService.createCollection(newCollection).subscribe(response => this.handleResponse(response));\n    }\n  }\n  handleResponse(response) {\n    if (response.success) {\n      console.log(response.message);\n      this._router.navigate(['/collections']);\n    } else {\n      console.log('Collection operation failed');\n    }\n  }\n  backToCollections() {\n    this._router.navigate(['/collections']);\n  }\n  ngOnInit() {\n    this._route.params.subscribe(params => {\n      if (params['mode'] === 'create') {\n        this.isEditMode = false; // Create mode\n      } else if (params['mode'] === 'edit') {\n        this.isEditMode = true; // Edit mode\n        this.collectionId = +params['id']; // Convert to number\n        this.loadCollectionForEdit(this.collectionId);\n      }\n    });\n  }\n  loadCollectionForEdit(collectionId) {\n    this._collectionService.getCollectionById(collectionId).subscribe(collection => {\n      this.originalCollection = collection;\n      console.log('retrieved collection: ', collection);\n      this.collectionForm.patchValue({\n        collectionName: collection.collectionName,\n        collectionFlashcard: collection.collectionFlashcard,\n        collectionDate: collection.collectionDate,\n        totalFlashcards: collection.totalFlashcards,\n        contributerId: collection.contributerId,\n        contributers: collection.contributers\n      });\n    }, error => {\n      console.error('Error loading collection for edit:', error);\n    });\n  }\n}\nCollectionformComponent.ɵfac = function CollectionformComponent_Factory(t) {\n  return new (t || CollectionformComponent)(i0.ɵɵdirectiveInject(i1.CollectionService), i0.ɵɵdirectiveInject(i2.FlashcardService), i0.ɵɵdirectiveInject(i3.CollectionFlashcardService), i0.ɵɵdirectiveInject(i4.FormBuilder), i0.ɵɵdirectiveInject(i5.Router), i0.ɵɵdirectiveInject(i5.ActivatedRoute));\n};\nCollectionformComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: CollectionformComponent,\n  selectors: [[\"app-collections-collectionform\"]],\n  decls: 11,\n  vars: 4,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"collectionName\"], [\"type\", \"text\", \"id\", \"collectionName\", \"formControlName\", \"collectionName\", 1, \"form-control\"], [\"type\", \"submit\", 1, \"btn-primary\", \"btn\", 3, \"disabled\"], [1, \"btn\", \"btn-secondary\", 3, \"click\"]],\n  template: function CollectionformComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h2\");\n      i0.ɵɵtext(1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function CollectionformComponent_Template_form_ngSubmit_2_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(3, \"div\", 1)(4, \"label\", 2);\n      i0.ɵɵtext(5, \"Name:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(6, \"input\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"button\", 4);\n      i0.ɵɵtext(8);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"button\", 5);\n      i0.ɵɵlistener(\"click\", function CollectionformComponent_Template_button_click_9_listener() {\n        return ctx.backToCollections();\n      });\n      i0.ɵɵtext(10, \"Cancel\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate1(\"\", ctx.isEditMode ? \"Update\" : \"Create\", \" Collection\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formGroup\", ctx.collectionForm);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"disabled\", ctx.collectionForm.invalid);\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate1(\"\", ctx.isEditMode ? \"Update\" : \"Create\", \" Collection\");\n    }\n  },\n  dependencies: [i4.ɵNgNoValidate, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i4.FormGroupDirective, i4.FormControlName],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"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","names":["forkJoin","CollectionformComponent","constructor","_collectionService","_flashcardService","_collectionFlashcardService","_formbuilder","_router","_route","collectionForm","group","collectionId","collectionDate","collectionName","collectionFlashcard","totalFlashcards","contributerId","contributers","getFlashcards","subscribe","flashcards","console","log","patchValue","error","onSubmit","newCollection","value","isEditMode","updateCollection","response","handleResponse","createCollection","success","message","navigate","backToCollections","ngOnInit","params","loadCollectionForEdit","getCollectionById","collection","originalCollection","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["C:\\Users\\fmnil\\source\\repos\\WebApp2\\WebApp2\\ClientApp\\src\\app\\Collections\\collectionform.component.ts","C:\\Users\\fmnil\\source\\repos\\WebApp2\\WebApp2\\ClientApp\\src\\app\\Collections\\collectionform.component.html"],"sourcesContent":["import { Component, OnInit, ViewChild, ElementRef } from \"@angular/core\";\r\nimport { FormGroup, FormBuilder, Validators } from \"@angular/forms\";\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { CollectionService } from './collections.service';\r\nimport { IFlashcard } from '../Flashcards/flashcard';;\r\nimport { ICollection } from './collection';\r\nimport { ICollectionFlashcard } from '../CollectionFlashcard/collectionFlashcard';\r\nimport { CollectionFlashcardService } from '../CollectionFlashcard/collectionFlashcards.service';\r\nimport { FlashcardService } from '../Flashcards/flashcards.service';\r\nimport { forkJoin } from 'rxjs';\r\n\r\n@Component({\r\n  selector: \"app-collections-collectionform\",\r\n  templateUrl: \"./collectionform.component.html\"\r\n})\r\n\r\nexport class CollectionformComponent implements OnInit{\r\n  collectionForm: FormGroup;\r\n  isEditMode: boolean = false;\r\n  collectionId: number = -1;\r\n  flashcards: IFlashcard[] = [];\r\n  originalCollection: ICollection[] = [];\r\n\r\n\r\n  \r\n\r\n  constructor(\r\n    private _collectionService: CollectionService,\r\n    private _flashcardService: FlashcardService,\r\n    private _collectionFlashcardService: CollectionFlashcardService,\r\n    private _formbuilder: FormBuilder,\r\n    private _router: Router,\r\n    private _route: ActivatedRoute\r\n  ) {\r\n    this.collectionForm = _formbuilder.group({\r\n      collectionId: [''],\r\n      collectionDate: [''], \r\n      collectionName: [''], \r\n      collectionFlashcard: [''], \r\n      totalFlashcards: [''], \r\n      contributerId: [''], \r\n      contributers: [''], \r\n    });\r\n\r\n\r\n\r\n    // Automatic data insertion\r\n    forkJoin([\r\n      this._flashcardService.getFlashcards(),\r\n    ]).subscribe(\r\n      ([flashcards]) => {\r\n        this.flashcards = flashcards;\r\n        console.log(\"Retrieved flashcards: \", flashcards)\r\n        this.collectionForm.patchValue({\r\n          /*collectionDate: new Date().getDate() + \".\" + (new Date().getMonth() + 1) + \".\" + new Date().getFullYear(),*/\r\n          flashcards: [],\r\n        });\r\n      },\r\n      (error) => {\r\n        console.error('Error fetching data:', error);\r\n      }\r\n    );\r\n  }\r\n\r\n  onSubmit() {\r\n    const newCollection = this.collectionForm.value;\r\n    console.log(\"newCollection: \", newCollection)\r\n\r\n    if (this.isEditMode) {\r\n      console.log(\"sending collection: \", newCollection)\r\n      this._collectionService.updateCollection(this.collectionId, newCollection)\r\n        .subscribe(response => this.handleResponse(response));\r\n    } else {\r\n      this._collectionService.createCollection(newCollection)\r\n        .subscribe(response => this.handleResponse(response));\r\n    }\r\n  }\r\n\r\n  private handleResponse(response: any) {\r\n    if (response.success) {\r\n      console.log(response.message);\r\n      this._router.navigate(['/collections']);\r\n    } else {\r\n      console.log('Collection operation failed');\r\n    }\r\n  }\r\n\r\n  backToCollections() {\r\n    this._router.navigate(['/collections']);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this._route.params.subscribe(params => {\r\n      if (params['mode'] === 'create') {\r\n        this.isEditMode = false; // Create mode\r\n      } else if (params['mode'] === 'edit') {\r\n        this.isEditMode = true; // Edit mode\r\n        this.collectionId = +params['id']; // Convert to number\r\n        this.loadCollectionForEdit(this.collectionId);\r\n      }\r\n    });\r\n  }\r\n\r\n  loadCollectionForEdit(collectionId: number) {\r\n    this._collectionService.getCollectionById(collectionId)\r\n      .subscribe(\r\n        (collection: any) => {\r\n          this.originalCollection = collection;\r\n          console.log('retrieved collection: ', collection)\r\n          this.collectionForm.patchValue({\r\n            collectionName: collection.collectionName,\r\n            collectionFlashcard: collection.collectionFlashcard, \r\n            collectionDate: collection.collectionDate,\r\n            totalFlashcards: collection.totalFlashcards,\r\n            contributerId: collection.contributerId,\r\n            contributers: collection.contributers,\r\n          });\r\n        },\r\n        (error: any) => {\r\n          console.error('Error loading collection for edit:', error);\r\n        }\r\n      );\r\n  }\r\n}\r\n","<h2>{{isEditMode ? 'Update' : 'Create'}} Collection</h2>\r\n\r\n<form [formGroup]=\"collectionForm\" (ngSubmit)=\"onSubmit()\">\r\n  <div class=\"form-group\">\r\n    <label for=\"collectionName\">Name:</label>\r\n    <input type=\"text\" id=\"collectionName\" formControlName=\"collectionName\" class=\"form-control\" />\r\n  </div>\r\n\r\n  <!--<div class=\"form-group\">\r\n    <label for=\"collectionFlashcard\">Add flashcards:</label>\r\n    <br />\r\n    <select multiple formControlName=\"selectedFlashcards\" style=\"width: 300px;\">\r\n      <option *ngFor=\"let flashcard of flashcards\" [ngValue]=\"flashcard\">{{flashcard.flashcardId}}. Term: {{flashcard.name}}, Definition: {{flashcard.description}}</option>\r\n    </select>\r\n  </div>-->\r\n\r\n  <button class=\"btn-primary btn\" type=\"submit\" [disabled]=\"collectionForm.invalid\">{{isEditMode ? 'Update' : 'Create'}} Collection</button>\r\n  <button class=\"btn btn-secondary\" (click)=\"backToCollections()\">Cancel</button>\r\n\r\n</form>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}